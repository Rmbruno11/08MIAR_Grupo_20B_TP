{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jUehXgCyIRdq"
      },
      "source": [
        "# Actividad - Proyecto práctico\n",
        "\n",
        "\n",
        "> La actividad se desarrollará en grupos pre-definidos de 2-3 alumnos. Se debe indicar los nombres en orden alfabético (de apellidos). Recordad que esta actividad se corresponde con un 30% de la nota final de la asignatura. Se debe entregar entregar el trabajo en la presente notebook.\n",
        "*   Alumno 1: Castiblanco Alexander\n",
        "*   Alumno 2:\n",
        "*   Alumno 3:\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JwpYlnjWJhS9"
      },
      "source": [
        "---\n",
        "## **PARTE 1** - Instalación y requisitos previos\n",
        "\n",
        "> Las prácticas han sido preparadas para poder realizarse en el entorno de trabajo de Google Colab. Sin embargo, esta plataforma presenta ciertas incompatibilidades a la hora de visualizar la renderización en gym. Por ello, para obtener estas visualizaciones, se deberá trasladar el entorno de trabajo a local. Por ello, el presente dosier presenta instrucciones para poder trabajar en ambos entornos. Siga los siguientes pasos para un correcto funcionamiento:\n",
        "1.   **LOCAL:** Preparar el enviroment, siguiendo las intrucciones detalladas en la sección *1.1.Preparar enviroment*.\n",
        "2.  **AMBOS:** Modificar las variables \"mount\" y \"drive_mount\" a la carpeta de trabajo en drive en el caso de estar en Colab, y ejecturar la celda *1.2.Localizar entorno de trabajo*.\n",
        "3. **COLAB:** se deberá ejecutar las celdas correspondientes al montaje de la carpeta de trabajo en Drive. Esta corresponde a la sección *1.3.Montar carpeta de datos local*.\n",
        "4.  **AMBOS:** Instalar las librerías necesarias, siguiendo la sección *1.4.Instalar librerías necesarias*.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RU2BPrK2JkP0"
      },
      "source": [
        "---\n",
        "### 1.1. Preparar enviroment (solo local)\n",
        "\n",
        "\n",
        "\n",
        "> Para preparar el entorno de trabajo en local, se han seguido los siguientes pasos:\n",
        "1. En Windows, puede ser necesario instalar las C++ Build Tools. Para ello, siga los siguientes pasos: https://towardsdatascience.com/how-to-install-openai-gym-in-a-windows-environment-338969e24d30.\n",
        "2. Instalar Anaconda\n",
        "3. Siguiendo el código que se presenta comentado en la próxima celda: Crear un enviroment, cambiar la ruta de trabajo, e instalar librerías básicas.\n",
        "\n",
        "\n",
        "```\n",
        "conda create --name miar_rl python=3.8\n",
        "conda activate miar_rl\n",
        "cd \"PATH_TO_FOLDER\"\n",
        "conda install git\n",
        "pip install jupyter\n",
        "```\n",
        "\n",
        "\n",
        "4. Abrir la notebook con *jupyter-notebook*.\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "jupyter-notebook\n",
        "```\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w-kixNPiJqTc"
      },
      "source": [
        "---\n",
        "### 1.2. Localizar entorno de trabajo: Google colab o local"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S_YDFwZ-JscI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f7407e7c-95f9-470f-f416-1df5446c0170"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ],
      "source": [
        "# ATENCIÓN!! Modificar ruta relativa a la práctica si es distinta (drive_root)\n",
        "mount='/content/gdrive'\n",
        "drive_root = mount + \"/My Drive/Grupo_20_AR\"\n",
        "\n",
        "try:\n",
        "  from google.colab import drive\n",
        "  IN_COLAB=True\n",
        "except:\n",
        "  IN_COLAB=False\n",
        "\n",
        "print(IN_COLAB)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8Dp_a1iBJ0tf"
      },
      "source": [
        "---\n",
        "### 1.3. Montar carpeta de datos local (solo Colab)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I6n7MIefJ21i",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d0a7857-a621-472a-8ce3-88114fe74a26"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "We're running Colab\n",
            "Colab: mounting Google drive on  /content/gdrive\n",
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n",
            "\n",
            "Colab: making sure  /content/gdrive/My Drive/Grupo_20_AR  exists.\n",
            "\n",
            "Colab: Changing directory to  /content/gdrive/My Drive/Grupo_20_AR\n",
            "/content/gdrive/My Drive/Grupo_20_AR\n",
            "Archivos en el directorio: \n",
            "['dqn_SpaceInvaders-v0_weights_final.h5f.data-00000-of-00001', 'dqn_SpaceInvaders-v0_log.json', 'dqn_SpaceInvaders-v0_weights_final.h5f.index', 'dqn_SpaceInvaders-v0_weights_focused.h5f.data-00000-of-00001', 'dqn_SpaceInvaders-v0_weights_focused.h5f.index', 'checkpoint', 'openaigym.manifest.1.160.manifest.json', 'openaigym.video.1.160.video000000.mp4', 'openaigym.video.1.160.video000000.meta.json', 'openaigym.episode_batch.1.160.stats.json', 'Proyecto_práctico.ipynb', 'Proyecto_practico_test_en_colab.ipynb']\n"
          ]
        }
      ],
      "source": [
        "# Switch to the directory on the Google Drive that you want to use\n",
        "import os\n",
        "if IN_COLAB:\n",
        "  print(\"We're running Colab\")\n",
        "\n",
        "  if IN_COLAB:\n",
        "    # Mount the Google Drive at mount\n",
        "    print(\"Colab: mounting Google drive on \", mount)\n",
        "\n",
        "    drive.mount(mount)\n",
        "\n",
        "    # Create drive_root if it doesn't exist\n",
        "    create_drive_root = True\n",
        "    if create_drive_root:\n",
        "      print(\"\\nColab: making sure \", drive_root, \" exists.\")\n",
        "      os.makedirs(drive_root, exist_ok=True)\n",
        "\n",
        "    # Change to the directory\n",
        "    print(\"\\nColab: Changing directory to \", drive_root)\n",
        "    %cd $drive_root\n",
        "else:\n",
        "    print(\"Running in local\", os.getcwd())\n",
        "# Verify we're in the correct working directory\n",
        "%pwd\n",
        "print(\"Archivos en el directorio: \")\n",
        "print(os.listdir())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i1ZSL5bpJ560"
      },
      "source": [
        "---\n",
        "### 1.4. Instalar librerías necesarias"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UbVRjvHCJ8UF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f81b286f-b9df-46f6-b06b-c3d683be7316"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: gym==0.17.3 in /usr/local/lib/python3.11/dist-packages (0.17.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.11/dist-packages (from gym==0.17.3) (1.15.3)\n",
            "Requirement already satisfied: numpy>=1.10.4 in /usr/local/lib/python3.11/dist-packages (from gym==0.17.3) (1.23.5)\n",
            "Requirement already satisfied: pyglet<=1.5.0,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from gym==0.17.3) (1.5.0)\n",
            "Requirement already satisfied: cloudpickle<1.7.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from gym==0.17.3) (1.6.0)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.11/dist-packages (from pyglet<=1.5.0,>=1.4.0->gym==0.17.3) (1.0.0)\n",
            "Collecting git+https://github.com/Kojoley/atari-py.git\n",
            "  Cloning https://github.com/Kojoley/atari-py.git to /tmp/pip-req-build-77d5we7q\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/Kojoley/atari-py.git /tmp/pip-req-build-77d5we7q\n",
            "  Resolved https://github.com/Kojoley/atari-py.git to commit 86a1e05c0a95e9e6233c3a413521fdb34ca8a089\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from atari-py==1.2.2) (1.23.5)\n",
            "Requirement already satisfied: keras-rl2==1.0.5 in /usr/local/lib/python3.11/dist-packages (1.0.5)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (from keras-rl2==1.0.5) (2.12.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (25.2.10)\n",
            "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (0.4.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (0.2.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (1.73.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (3.14.0)\n",
            "Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (0.4.30)\n",
            "Requirement already satisfied: keras<2.13,>=2.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (2.12.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (18.1.1)\n",
            "Requirement already satisfied: numpy<1.24,>=1.22 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (1.23.5)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (4.25.8)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (75.2.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (1.17.0)\n",
            "Requirement already satisfied: tensorboard<2.13,>=2.12 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (2.12.3)\n",
            "Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (2.12.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (3.1.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (4.14.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow->keras-rl2==1.0.5) (0.37.1)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow->keras-rl2==1.0.5) (0.45.1)\n",
            "Requirement already satisfied: jaxlib<=0.4.30,>=0.4.27 in /usr/local/lib/python3.11/dist-packages (from jax>=0.3.15->tensorflow->keras-rl2==1.0.5) (0.4.30)\n",
            "Requirement already satisfied: ml-dtypes>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from jax>=0.3.15->tensorflow->keras-rl2==1.0.5) (0.4.1)\n",
            "Requirement already satisfied: scipy>=1.9 in /usr/local/lib/python3.11/dist-packages (from jax>=0.3.15->tensorflow->keras-rl2==1.0.5) (1.15.3)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (2.38.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (1.0.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (3.8)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (2.32.3)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (3.1.3)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (5.5.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (0.4.2)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (4.9.1)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (2.0.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (2025.6.15)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (3.0.2)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (0.6.1)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow->keras-rl2==1.0.5) (3.2.2)\n",
            "Requirement already satisfied: tensorflow==2.12 in /usr/local/lib/python3.11/dist-packages (2.12.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=2.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (25.2.10)\n",
            "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (0.4.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (0.2.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (1.73.0)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (3.14.0)\n",
            "Requirement already satisfied: jax>=0.3.15 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (0.4.30)\n",
            "Requirement already satisfied: keras<2.13,>=2.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (2.12.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (18.1.1)\n",
            "Requirement already satisfied: numpy<1.24,>=1.22 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (1.23.5)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (4.25.8)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (75.2.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (1.17.0)\n",
            "Requirement already satisfied: tensorboard<2.13,>=2.12 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (2.12.3)\n",
            "Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (2.12.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (3.1.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (4.14.0)\n",
            "Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (1.14.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow==2.12) (0.37.1)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow==2.12) (0.45.1)\n",
            "Requirement already satisfied: jaxlib<=0.4.30,>=0.4.27 in /usr/local/lib/python3.11/dist-packages (from jax>=0.3.15->tensorflow==2.12) (0.4.30)\n",
            "Requirement already satisfied: ml-dtypes>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from jax>=0.3.15->tensorflow==2.12) (0.4.1)\n",
            "Requirement already satisfied: scipy>=1.9 in /usr/local/lib/python3.11/dist-packages (from jax>=0.3.15->tensorflow==2.12) (1.15.3)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12) (2.38.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12) (1.0.0)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12) (3.8)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12) (2.32.3)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12) (3.1.3)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12) (5.5.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12) (0.4.2)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12) (4.9.1)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow==2.12) (2.0.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorboard<2.13,>=2.12->tensorflow==2.12) (2025.6.15)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow==2.12) (3.0.2)\n",
            "Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12) (0.6.1)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow==2.12) (3.2.2)\n"
          ]
        }
      ],
      "source": [
        "if IN_COLAB:\n",
        "  %pip install gym==0.17.3\n",
        "  %pip install git+https://github.com/Kojoley/atari-py.git\n",
        "  %pip install keras-rl2==1.0.5\n",
        "  %pip install tensorflow==2.12\n",
        "else:\n",
        "  %pip install gym==0.17.3\n",
        "  %pip install git+https://github.com/Kojoley/atari-py.git\n",
        "  %pip install pyglet==1.5.0\n",
        "  %pip install h5py==3.1.0\n",
        "  %pip install Pillow==9.5.0\n",
        "  %pip install keras-rl2==1.0.5\n",
        "  %pip install Keras==2.2.4\n",
        "  %pip install tensorflow==2.5.3\n",
        "  %pip install torch==2.0.1\n",
        "  %pip install agents==1.4.0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5yoCN-ywfc8V",
        "outputId": "51f61240-19fe-4f08-bc6c-d2da68f2cf42"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Verificando instalación completa...\n",
            "✓ TensorFlow: 2.12.0\n",
            "  - Test tensor: OK\n",
            "✓ Keras: 2.12.0\n",
            "  - Keras components: OK\n",
            "\n",
            "Verificando keras-rl2 paso a paso...\n",
            "✓ Módulo rl importado\n",
            "✓ rl.core importado\n",
            "✓ rl.memory importado\n",
            "✓ rl.policy importado\n",
            "✓ rl.agents.dqn importado\n",
            "✓ Objetos básicos creados\n",
            "✓ keras-rl2: TOTALMENTE FUNCIONAL\n",
            "✓ Gym: 0.17.3\n",
            "✓ NumPy: 1.23.5\n",
            "✓ Pillow: OK\n",
            "✓ h5py: 3.14.0\n",
            "\n",
            "============================================================\n",
            "INSTALACIÓN COMPLETAMENTE VERIFICADA - LISTA PARA USAR\n",
            "============================================================\n",
            "Python: 3.11.13\n"
          ]
        }
      ],
      "source": [
        "def verificar_instalacion_completa():\n",
        "    \"\"\"Verificación completa de todas las dependencias\"\"\"\n",
        "    print(\"Verificando instalación completa...\")\n",
        "\n",
        "    # Verificar TensorFlow\n",
        "    try:\n",
        "        import tensorflow as tf\n",
        "        print(f\"✓ TensorFlow: {tf.__version__}\")\n",
        "\n",
        "        # Verificar que TensorFlow funcione\n",
        "        test_tensor = tf.constant([1, 2, 3])\n",
        "        print(f\"  - Test tensor: OK\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"✗ TensorFlow: Error - {e}\")\n",
        "        return False\n",
        "\n",
        "    # Verificar Keras\n",
        "    try:\n",
        "        import keras\n",
        "        print(f\"✓ Keras: {keras.__version__}\")\n",
        "\n",
        "        # Verificar componentes específicos que usa keras-rl2\n",
        "        from tensorflow.keras.models import Sequential, Model\n",
        "        from tensorflow.keras.layers import Dense, Input\n",
        "        print(f\"  - Keras components: OK\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"✗ Keras: Error - {e}\")\n",
        "        return False\n",
        "\n",
        "    # Verificar keras-rl2 paso a paso\n",
        "    print(\"\\nVerificando keras-rl2 paso a paso...\")\n",
        "\n",
        "    try:\n",
        "        # Test 1: Importar módulo principal\n",
        "        import rl\n",
        "        print(\"✓ Módulo rl importado\")\n",
        "\n",
        "        # Test 2: Importar core\n",
        "        from rl.core import Agent\n",
        "        print(\"✓ rl.core importado\")\n",
        "\n",
        "        # Test 3: Importar memory\n",
        "        from rl.memory import SequentialMemory\n",
        "        print(\"✓ rl.memory importado\")\n",
        "\n",
        "        # Test 4: Importar policy\n",
        "        from rl.policy import EpsGreedyQPolicy\n",
        "        print(\"✓ rl.policy importado\")\n",
        "\n",
        "        # Test 5: Importar agents\n",
        "        from rl.agents.dqn import DQNAgent\n",
        "        print(\"✓ rl.agents.dqn importado\")\n",
        "\n",
        "        # Test 6: Crear objetos básicos\n",
        "        memory = SequentialMemory(limit=1000, window_length=1)\n",
        "        policy = EpsGreedyQPolicy()\n",
        "        print(\"✓ Objetos básicos creados\")\n",
        "\n",
        "        print(\"✓ keras-rl2: TOTALMENTE FUNCIONAL\")\n",
        "\n",
        "    except ImportError as e:\n",
        "        print(f\"✗ keras-rl2: ImportError - {e}\")\n",
        "        print(\"\\nDiagnóstico detallado:\")\n",
        "\n",
        "        # Diagnóstico específico\n",
        "        if \"model_from_config\" in str(e):\n",
        "            print(\"- Problema: model_from_config no encontrado\")\n",
        "            print(\"- Solución: Aplicar parche o usar TensorFlow 2.6.x\")\n",
        "        elif \"callbacks\" in str(e):\n",
        "            print(\"- Problema: Callbacks incompatibles\")\n",
        "            print(\"- Solución: Verificar versión de protobuf\")\n",
        "\n",
        "        return False\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"✗ keras-rl2: Error general - {e}\")\n",
        "        return False\n",
        "\n",
        "    # Verificar otras dependencias\n",
        "    try:\n",
        "        import gym\n",
        "        print(f\"✓ Gym: {gym.__version__}\")\n",
        "\n",
        "        import numpy as np\n",
        "        print(f\"✓ NumPy: {np.__version__}\")\n",
        "\n",
        "        from PIL import Image\n",
        "        print(\"✓ Pillow: OK\")\n",
        "\n",
        "        import h5py\n",
        "        print(f\"✓ h5py: {h5py.__version__}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"✗ Otras dependencias: {e}\")\n",
        "\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "    print(\"INSTALACIÓN COMPLETAMENTE VERIFICADA - LISTA PARA USAR\")\n",
        "    print(\"=\"*60)\n",
        "    return True\n",
        "\n",
        "# Ejecutar verificación completa\n",
        "verificar_instalacion_completa()\n",
        "\n",
        "import sys; print(f\"Python: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4hzP_5ZuGb2X"
      },
      "source": [
        "---\n",
        "## **PARTE 2**. Enunciado\n",
        "\n",
        "Consideraciones a tener en cuenta:\n",
        "\n",
        "- El entorno sobre el que trabajaremos será _SpaceInvaders-v0_ y el algoritmo que usaremos será _DQN_.\n",
        "\n",
        "- Para nuestro ejercicio, el requisito mínimo será alcanzado cuando el agente consiga una **media de recompensa por encima de 20 puntos en modo test**. Por ello, esta media de la recompensa se calculará a partir del código de test en la última celda del notebook.\n",
        "\n",
        "Este proyecto práctico consta de tres partes:\n",
        "\n",
        "1.   Implementar la red neuronal que se usará en la solución\n",
        "2.   Implementar las distintas piezas de la solución DQN\n",
        "3.   Justificar la respuesta en relación a los resultados obtenidos\n",
        "\n",
        "**Rúbrica**: Se valorará la originalidad en la solución aportada, así como la capacidad de discutir los resultados de forma detallada. El requisito mínimo servirá para aprobar la actividad, bajo premisa de que la discusión del resultado sera apropiada.\n",
        "\n",
        "IMPORTANTE:\n",
        "\n",
        "* Si no se consigue una puntuación óptima, responder sobre la mejor puntuación obtenida.\n",
        "* Para entrenamientos largos, recordad que podéis usar checkpoints de vuestros modelos para retomar los entrenamientos. En este caso, recordad cambiar los parámetros adecuadamente (sobre todo los relacionados con el proceso de exploración).\n",
        "* Se deberá entregar unicamente el notebook y los pesos del mejor modelo en un fichero .zip, de forma organizada.\n",
        "* Cada alumno deberá de subir la solución de forma individual."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6_b3mzw8IzJP"
      },
      "source": [
        "---\n",
        "## **PARTE 3**. Desarrollo y preguntas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "duPmUNOVGb2a"
      },
      "source": [
        "#### Importar librerías"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j3eRhgI-Gb2a",
        "scrolled": true
      },
      "outputs": [],
      "source": [
        "from __future__ import division\n",
        "\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import gym\n",
        "\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Activation, Flatten, Convolution2D, Permute\n",
        "from tensorflow.keras.optimizers.legacy import Adam\n",
        "import tensorflow.keras.backend as K\n",
        "\n",
        "from rl.agents.dqn import DQNAgent\n",
        "from rl.policy import LinearAnnealedPolicy, BoltzmannQPolicy, EpsGreedyQPolicy\n",
        "from rl.memory import SequentialMemory\n",
        "from rl.core import Processor\n",
        "from rl.callbacks import FileLogger, ModelIntervalCheckpoint"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f4jgQjzoGb2a"
      },
      "source": [
        "#### Configuración base"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jwOE6I_KGb2a"
      },
      "outputs": [],
      "source": [
        "INPUT_SHAPE = (84, 84)\n",
        "WINDOW_LENGTH = 4\n",
        "\n",
        "env_name = 'SpaceInvaders-v0'\n",
        "env = gym.make(env_name)\n",
        "\n",
        "np.random.seed(123)\n",
        "env.seed(123)\n",
        "nb_actions = env.action_space.n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9jGEZUcpGb2a"
      },
      "outputs": [],
      "source": [
        "class AtariProcessor(Processor):\n",
        "    def process_observation(self, observation):\n",
        "        assert observation.ndim == 3  # (height, width, channel)\n",
        "        img = Image.fromarray(observation)\n",
        "        img = img.resize(INPUT_SHAPE).convert('L')\n",
        "        processed_observation = np.array(img)\n",
        "        assert processed_observation.shape == INPUT_SHAPE\n",
        "        return processed_observation.astype('uint8')\n",
        "\n",
        "    def process_state_batch(self, batch):\n",
        "        processed_batch = batch.astype('float32') / 255.\n",
        "        return processed_batch\n",
        "\n",
        "    def process_reward(self, reward):\n",
        "        return np.clip(reward, -1., 1.)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7yitXTADGb2b"
      },
      "source": [
        "1. Implementación de la red neuronal"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O4GKrfWSGb2b",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f2568f58-70c2-44fa-ab14-1f7ed3c9d077"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Construyendo modelo con entrada: (4, 84, 84), acciones: 6\n",
            "✓ Modelo construido exitosamente\n",
            "Arquitectura del modelo:\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " permute (Permute)           (None, 84, 84, 4)         0         \n",
            "                                                                 \n",
            " conv2d (Conv2D)             (None, 20, 20, 32)        8224      \n",
            "                                                                 \n",
            " activation (Activation)     (None, 20, 20, 32)        0         \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 9, 9, 64)          32832     \n",
            "                                                                 \n",
            " activation_1 (Activation)   (None, 9, 9, 64)          0         \n",
            "                                                                 \n",
            " conv2d_2 (Conv2D)           (None, 7, 7, 64)          36928     \n",
            "                                                                 \n",
            " activation_2 (Activation)   (None, 7, 7, 64)          0         \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 3136)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 512)               1606144   \n",
            "                                                                 \n",
            " activation_3 (Activation)   (None, 512)               0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 6)                 3078      \n",
            "                                                                 \n",
            " activation_4 (Activation)   (None, 6)                 0         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,687,206\n",
            "Trainable params: 1,687,206\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "None\n",
            "Compilando modelo...\n",
            "Construyendo modelo con entrada dummy...\n",
            "✓ Modelo construido. Forma de salida: (None, 6)\n",
            "✓ Número de parámetros: 1,687,206\n"
          ]
        }
      ],
      "source": [
        "def build_model(input_shape, actions):\n",
        "    \"\"\"\n",
        "    Construye la red neuronal convolucional para DQN\n",
        "\n",
        "    Arquitectura basada en el paper original de DQN (Mnih et al., 2015):\n",
        "    - 3 capas convolucionales para extracción de características visuales\n",
        "    - 2 capas densas para aproximación de valores Q\n",
        "    \"\"\"\n",
        "    print(f\"Construyendo modelo con entrada: {input_shape}, acciones: {actions}\")\n",
        "\n",
        "    model = Sequential()\n",
        "\n",
        "    # Reorganizar dimensiones para TensorFlow (canal al final)\n",
        "    if K.image_data_format() == 'channels_last':\n",
        "        model.add(Permute((2, 3, 1), input_shape=input_shape))\n",
        "    elif K.image_data_format() == 'channels_first':\n",
        "        model.add(Permute((1, 2, 3), input_shape=input_shape))\n",
        "    else:\n",
        "        raise RuntimeError('Unknown image_data_format for Keras: {}'.format(K.image_data_format()))\n",
        "\n",
        "    # Primera capa convolucional: 32 filtros 8x8, stride 4\n",
        "    model.add(Convolution2D(32, (8, 8), strides=(4, 4), padding='valid'))\n",
        "    model.add(Activation('relu'))\n",
        "\n",
        "    # Segunda capa convolucional: 64 filtros 4x4, stride 2\n",
        "    model.add(Convolution2D(64, (4, 4), strides=(2, 2), padding='valid'))\n",
        "    model.add(Activation('relu'))\n",
        "\n",
        "    # Tercera capa convolucional: 64 filtros 3x3, stride 1\n",
        "    model.add(Convolution2D(64, (3, 3), strides=(1, 1), padding='valid'))\n",
        "    model.add(Activation('relu'))\n",
        "\n",
        "    # Aplanar para capas densas\n",
        "    model.add(Flatten())\n",
        "\n",
        "    # Capa densa oculta con 512 neuronas\n",
        "    model.add(Dense(512))\n",
        "    model.add(Activation('relu'))\n",
        "\n",
        "    # Capa de salida: una neurona por acción posible\n",
        "    model.add(Dense(actions))\n",
        "    model.add(Activation('linear'))\n",
        "\n",
        "    # Compilar el modelo inmediatamente para evitar problemas\n",
        "    model.compile(optimizer='adam', loss='mse')\n",
        "\n",
        "    # Construir el modelo con una entrada dummy\n",
        "    try:\n",
        "        import tensorflow as tf\n",
        "        dummy_input = tf.zeros((1,) + input_shape, dtype=tf.float32)\n",
        "        _ = model(dummy_input)\n",
        "        print(f\"✓ Modelo construido exitosamente\")\n",
        "    except Exception as e:\n",
        "        print(f\"⚠ Advertencia al construir modelo: {e}\")\n",
        "        # Intentar con numpy\n",
        "        try:\n",
        "            dummy_input = np.zeros((1,) + input_shape, dtype=np.float32)\n",
        "            _ = model.predict(dummy_input, verbose=0)\n",
        "            print(f\"✓ Modelo construido con predict\")\n",
        "        except Exception as e2:\n",
        "            print(f\"⚠ No se pudo pre-construir el modelo: {e2}\")\n",
        "\n",
        "    print(\"Arquitectura del modelo:\")\n",
        "    try:\n",
        "        print(model.summary())\n",
        "    except:\n",
        "        print(\"No se pudo mostrar el resumen del modelo\")\n",
        "\n",
        "    return model\n",
        "\n",
        "# Crear el modelo\n",
        "input_shape = (WINDOW_LENGTH,) + INPUT_SHAPE\n",
        "model = build_model(input_shape, nb_actions)\n",
        "\n",
        "# IMPORTANTE: Compilar y construir el modelo para evitar errores de atributos\n",
        "print(\"Compilando modelo...\")\n",
        "model.compile(optimizer='adam', loss='mse')\n",
        "\n",
        "# Construir el modelo con una entrada dummy para definir la forma\n",
        "print(\"Construyendo modelo con entrada dummy...\")\n",
        "import tensorflow as tf\n",
        "dummy_input = tf.zeros((1,) + input_shape)\n",
        "_ = model(dummy_input)\n",
        "print(f\"✓ Modelo construido. Forma de salida: {model.output_shape}\")\n",
        "print(f\"✓ Número de parámetros: {model.count_params():,}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OB9-_5HPGb2b"
      },
      "source": [
        "2. Implementación de la solución DQN"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "foSlxWH1Gb2b"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import json\n",
        "import time\n",
        "from datetime import datetime"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Mutvw9aJfc8Z"
      },
      "outputs": [],
      "source": [
        "# ==================== SISTEMA DE CHECKPOINTS ====================\n",
        "\n",
        "class CheckpointManager:\n",
        "    def __init__(self, env_name, base_dir='checkpoints'):\n",
        "        self.env_name = env_name\n",
        "        self.base_dir = base_dir\n",
        "        self.checkpoint_dir = os.path.join(base_dir, env_name)\n",
        "        self.metadata_file = os.path.join(self.checkpoint_dir, 'training_metadata.json')\n",
        "\n",
        "        # Crear directorio si no existe\n",
        "        os.makedirs(self.checkpoint_dir, exist_ok=True)\n",
        "\n",
        "    def save_checkpoint(self, dqn, step, episode, total_steps, epsilon):\n",
        "        \"\"\"Guarda un checkpoint completo del entrenamiento\"\"\"\n",
        "        checkpoint_data = {\n",
        "            'step': step,\n",
        "            'episode': episode,\n",
        "            'total_steps': total_steps,\n",
        "            'epsilon': epsilon,\n",
        "            'timestamp': datetime.now().isoformat(),\n",
        "            'weights_file': f'weights_step_{total_steps}.h5f'\n",
        "        }\n",
        "\n",
        "        # Guardar pesos en el directorio de checkpoints\n",
        "        weights_path = os.path.join(self.checkpoint_dir, checkpoint_data['weights_file'])\n",
        "        try:\n",
        "            dqn.save_weights(weights_path, overwrite=True)\n",
        "        except Exception as e:\n",
        "            print(f\"Warning: No se pudo guardar en checkpoints, guardando en directorio actual: {e}\")\n",
        "            # Fallback: guardar en directorio actual\n",
        "            weights_path = f'dqn_{self.env_name}_weights_{total_steps}.h5f'\n",
        "            dqn.save_weights(weights_path, overwrite=True)\n",
        "            checkpoint_data['weights_file'] = weights_path\n",
        "\n",
        "        # Guardar metadata\n",
        "        try:\n",
        "            with open(self.metadata_file, 'w') as f:\n",
        "                json.dump(checkpoint_data, f, indent=2)\n",
        "        except Exception as e:\n",
        "            print(f\"Warning: No se pudo guardar metadata: {e}\")\n",
        "\n",
        "        print(f\"✓ Checkpoint guardado en paso {total_steps} (episodio {episode})\")\n",
        "        return checkpoint_data\n",
        "\n",
        "    def load_checkpoint(self, dqn):\n",
        "        \"\"\"Carga el último checkpoint disponible\"\"\"\n",
        "        # Buscar el archivo de pesos más reciente\n",
        "        best_weights_path, best_steps = self._find_latest_weights()\n",
        "\n",
        "        if not best_weights_path:\n",
        "            print(\"No se encontró checkpoint previo. Iniciando entrenamiento desde cero.\")\n",
        "            return None\n",
        "\n",
        "        # Intentar cargar metadata si existe\n",
        "        metadata = None\n",
        "        if os.path.exists(self.metadata_file):\n",
        "            try:\n",
        "                with open(self.metadata_file, 'r') as f:\n",
        "                    metadata = json.load(f)\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "        # Cargar los pesos\n",
        "        try:\n",
        "            dqn.load_weights(best_weights_path)\n",
        "\n",
        "            # Usar pasos del archivo si metadata no coincide o no existe\n",
        "            actual_steps = best_steps if best_steps != 999999 else (metadata['total_steps'] if metadata else 0)\n",
        "\n",
        "            print(f\"✓ Checkpoint cargado desde: {best_weights_path}\")\n",
        "            print(f\"  - Pasos: {actual_steps:,}\")\n",
        "\n",
        "            if metadata:\n",
        "                # Verificar consistencia\n",
        "                if actual_steps > metadata['total_steps']:\n",
        "                    print(f\"  - ⚠ Archivo más reciente ({actual_steps:,}) que metadata ({metadata['total_steps']:,})\")\n",
        "                    # Actualizar metadata con información real\n",
        "                    metadata['total_steps'] = actual_steps\n",
        "                    metadata['step'] = actual_steps\n",
        "\n",
        "                print(f\"  - Epsilon: {metadata['epsilon']:.4f}\")\n",
        "                print(f\"  - Fecha: {metadata['timestamp']}\")\n",
        "            else:\n",
        "                # Crear metadata básica si no existe\n",
        "                progress = min(actual_steps / 1000000, 1.0)\n",
        "                estimated_epsilon = max(1.0 - progress * (1.0 - 0.1), 0.1)\n",
        "                metadata = {\n",
        "                    'total_steps': actual_steps,\n",
        "                    'step': actual_steps,\n",
        "                    'episode': 0,\n",
        "                    'epsilon': estimated_epsilon,\n",
        "                    'timestamp': datetime.now().isoformat()\n",
        "                }\n",
        "                print(f\"  - Epsilon estimado: {estimated_epsilon:.4f}\")\n",
        "\n",
        "            return metadata\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"⚠ Error cargando pesos desde {best_weights_path}: {e}\")\n",
        "            return None\n",
        "\n",
        "    def list_checkpoints(self):\n",
        "        \"\"\"Lista todos los checkpoints disponibles\"\"\"\n",
        "        weight_files = []\n",
        "\n",
        "        # Buscar en directorio actual\n",
        "        try:\n",
        "            current_files = [f for f in os.listdir('.') if f.endswith('.h5f.index') and self.env_name in f]\n",
        "            for f in current_files:\n",
        "                steps = self._extract_steps_from_filename(f)\n",
        "                if steps > 0 and steps != 999999:  # Excluir archivos \"final\"\n",
        "                    weight_files.append(steps)\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "        # Buscar en directorio de checkpoints\n",
        "        try:\n",
        "            if os.path.exists(self.checkpoint_dir):\n",
        "                checkpoint_files = [f for f in os.listdir(self.checkpoint_dir) if f.endswith('.h5f.index')]\n",
        "                for f in checkpoint_files:\n",
        "                    steps = self._extract_steps_from_filename(f)\n",
        "                    if steps > 0 and steps != 999999:  # Excluir archivos \"final\"\n",
        "                        weight_files.append(steps)\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "        # Remover duplicados\n",
        "        unique_steps = list(set(weight_files))\n",
        "        return sorted(unique_steps, reverse=True)\n",
        "\n",
        "    def _find_latest_weights(self):\n",
        "        \"\"\"Encuentra el archivo de pesos más reciente en cualquier ubicación\"\"\"\n",
        "        weight_files = []\n",
        "\n",
        "        print(\"Debug: Buscando archivos de pesos...\")  # Debug temporal\n",
        "\n",
        "        # Buscar en directorio actual\n",
        "        try:\n",
        "            all_files = os.listdir('.')\n",
        "            print(f\"Debug: Archivos en directorio actual: {len(all_files)}\")  # Debug temporal\n",
        "\n",
        "            # Filtrar archivos que contienen el nombre del entorno y terminan en .h5f.index\n",
        "            current_files = []\n",
        "            for f in all_files:\n",
        "                if f.endswith('.h5f.index') and 'SpaceInvaders' in f:\n",
        "                    current_files.append(f)\n",
        "                    print(f\"Debug: Archivo candidato encontrado: {f}\")  # Debug temporal\n",
        "\n",
        "            print(f\"Debug: Archivos .h5f.index de SpaceInvaders encontrados: {current_files}\")  # Debug temporal\n",
        "\n",
        "            for f in current_files:\n",
        "                if os.path.exists(f):\n",
        "                    steps = self._extract_steps_from_filename(f)\n",
        "                    if steps > 0:  # Solo considerar archivos con pasos válidos\n",
        "                        # El archivo real de pesos es sin .index\n",
        "                        weight_file = f.replace('.index', '')\n",
        "                        weight_files.append({\n",
        "                            'path': weight_file,  # Archivo sin .index para cargar\n",
        "                            'steps': steps,\n",
        "                            'mtime': os.path.getmtime(f),  # Usar .index para fecha\n",
        "                            'size': os.path.getsize(f)\n",
        "                        })\n",
        "                        print(f\"Debug: Archivo válido agregado: {weight_file} ({steps} pasos)\")  # Debug temporal\n",
        "        except Exception as e:\n",
        "            print(f\"Debug: Error buscando en directorio actual: {e}\")  # Debug temporal\n",
        "\n",
        "        # Buscar en directorio de checkpoints\n",
        "        try:\n",
        "            if os.path.exists(self.checkpoint_dir):\n",
        "                checkpoint_files = [f for f in os.listdir(self.checkpoint_dir) if f.endswith('.h5f.index')]\n",
        "                print(f\"Debug: Archivos en checkpoints: {checkpoint_files}\")  # Debug temporal\n",
        "\n",
        "                for f in checkpoint_files:\n",
        "                    path = os.path.join(self.checkpoint_dir, f)\n",
        "                    if os.path.exists(path):\n",
        "                        steps = self._extract_steps_from_filename(f)\n",
        "                        if steps > 0:\n",
        "                            # El archivo real está sin .index\n",
        "                            weight_file = path.replace('.index', '')\n",
        "                            weight_files.append({\n",
        "                                'path': weight_file,\n",
        "                                'steps': steps,\n",
        "                                'mtime': os.path.getmtime(path),\n",
        "                                'size': os.path.getsize(path)\n",
        "                            })\n",
        "        except Exception as e:\n",
        "            print(f\"Debug: Error buscando en checkpoints: {e}\")  # Debug temporal\n",
        "\n",
        "        print(f\"Debug: Total archivos válidos encontrados: {len(weight_files)}\")  # Debug temporal\n",
        "\n",
        "        if not weight_files:\n",
        "            print(\"Debug: No se encontraron archivos de pesos válidos\")  # Debug temporal\n",
        "            return None, 0\n",
        "\n",
        "        # Ordenar por pasos (más alto primero), luego por tiempo\n",
        "        weight_files.sort(key=lambda x: (x['steps'], x['mtime']), reverse=True)\n",
        "        best = weight_files[0]\n",
        "\n",
        "        print(f\"Debug: Mejor archivo seleccionado: {best['path']} ({best['steps']} pasos)\")  # Debug temporal\n",
        "\n",
        "        return best['path'], best['steps']\n",
        "\n",
        "    def _extract_steps_from_filename(self, filename):\n",
        "        \"\"\"Extrae el número de pasos del nombre del archivo\"\"\"\n",
        "        try:\n",
        "            if 'final' in filename:\n",
        "                return 999999  # Valor alto para archivos finales\n",
        "\n",
        "            # Buscar patrón específico para archivos de TensorFlow checkpoint\n",
        "            import re\n",
        "\n",
        "            # Patrones específicos para archivos .h5f.index y .h5f.data\n",
        "            patterns = [\n",
        "                r'_weights_(\\d+)\\.h5f\\.index',   # dqn_SpaceInvaders-v0_weights_400000.h5f.index\n",
        "                r'_weights_(\\d+)\\.h5f\\.data',    # dqn_SpaceInvaders-v0_weights_400000.h5f.data-*\n",
        "                r'_weights_(\\d+)\\.h5f',          # dqn_SpaceInvaders-v0_weights_400000.h5f\n",
        "                r'weights_(\\d+)\\.h5f',           # weights_400000.h5f\n",
        "                r'(\\d+)\\.h5f'                    # 400000.h5f\n",
        "            ]\n",
        "\n",
        "            for pattern in patterns:\n",
        "                match = re.search(pattern, filename)\n",
        "                if match:\n",
        "                    steps = int(match.group(1))\n",
        "                    print(f\"Debug: Archivo {filename} -> {steps} pasos\")  # Debug temporal\n",
        "                    return steps\n",
        "\n",
        "            print(f\"Debug: No se pudo extraer pasos de: {filename}\")  # Debug temporal\n",
        "            return 0\n",
        "        except Exception as e:\n",
        "            print(f\"Debug: Error procesando {filename}: {e}\")  # Debug temporal\n",
        "            return 0"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WNWMhvrxfc8Z",
        "outputId": "e639d357-904d-4b6e-c78e-0ba162a3b794"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Debug: Buscando archivos de pesos...\n",
            "Debug: Archivos en directorio actual: 13\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_final.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivos .h5f.index de SpaceInvaders encontrados: ['dqn_SpaceInvaders-v0_weights_final.h5f.index', 'dqn_SpaceInvaders-v0_weights_focused.h5f.index']\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "Debug: No se pudo extraer pasos de: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivos en checkpoints: []\n",
            "Debug: Total archivos válidos encontrados: 1\n",
            "Debug: Mejor archivo seleccionado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "Detectado: dqn_SpaceInvaders-v0_weights_final.h5f, 999999 pasos\n"
          ]
        }
      ],
      "source": [
        "checkpoint_manager = CheckpointManager(env_name)\n",
        "best_path, best_steps = checkpoint_manager._find_latest_weights()\n",
        "print(f\"Detectado: {best_path}, {best_steps} pasos\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "__ygTn0tfc8Z"
      },
      "outputs": [],
      "source": [
        "# ==================== CONFIGURACIÓN DE ENTRENAMIENTO POR ETAPAS ====================\n",
        "\n",
        "def setup_training_session(continue_training=True, target_total_steps=1750000):\n",
        "    \"\"\"\n",
        "    Configura una sesión de entrenamiento con soporte para checkpoints mejorado\n",
        "\n",
        "    Args:\n",
        "        continue_training: Si True, intenta cargar el último checkpoint\n",
        "        target_total_steps: Número total de pasos objetivo\n",
        "    \"\"\"\n",
        "\n",
        "    # Configuración de la memoria de experiencias\n",
        "    memory = SequentialMemory(limit=1000000, window_length=WINDOW_LENGTH)\n",
        "\n",
        "    # Configuración del procesador para Atari\n",
        "    processor = AtariProcessor()\n",
        "\n",
        "    # Inicializar checkpoint manager\n",
        "    checkpoint_manager = CheckpointManager(env_name)\n",
        "\n",
        "    # Configurar política inicial (se ajustará después según el checkpoint)\n",
        "    policy = LinearAnnealedPolicy(EpsGreedyQPolicy(), attr='eps', value_max=1., value_min=.1, value_test=.05,\n",
        "                                  nb_steps=1000000)\n",
        "\n",
        "    # Configuración del agente DQN\n",
        "    dqn = DQNAgent(model=model, nb_actions=nb_actions, policy=policy, memory=memory,\n",
        "                   processor=processor, nb_steps_warmup=50000, gamma=.99, target_model_update=10000,\n",
        "                   train_interval=4, delta_clip=1.)\n",
        "\n",
        "    # Compilar el agente\n",
        "    dqn.compile(Adam(lr=.00025), metrics=['mae'])\n",
        "\n",
        "    # Intentar cargar checkpoint si se solicita\n",
        "    checkpoint_data = None\n",
        "    steps_completed = 0\n",
        "\n",
        "    if continue_training:\n",
        "        checkpoint_data = checkpoint_manager.load_checkpoint(dqn)\n",
        "        if checkpoint_data:\n",
        "            steps_completed = checkpoint_data['total_steps']\n",
        "\n",
        "            # Ajustar la política de exploración según el progreso REAL\n",
        "            if steps_completed > 0:\n",
        "                # Calcular progreso en el annealing de epsilon (1M pasos total para annealing)\n",
        "                annealing_progress = min(steps_completed / 1000000, 1.0)\n",
        "\n",
        "                # Calcular epsilon actual: va de 1.0 a 0.1 en 1M pasos\n",
        "                current_eps = max(1.0 - annealing_progress * (1.0 - 0.1), 0.1)\n",
        "\n",
        "                # Ajustar la política directamente\n",
        "                policy.value_max = current_eps\n",
        "                policy.value = current_eps  # Valor actual\n",
        "\n",
        "                print(f\"✓ Epsilon ajustado según progreso real:\")\n",
        "                print(f\"  - Pasos completados: {steps_completed:,}\")\n",
        "                print(f\"  - Progreso annealing: {annealing_progress*100:.1f}%\")\n",
        "                print(f\"  - Epsilon actual: {current_eps:.4f}\")\n",
        "            else:\n",
        "                print(f\"✓ Iniciando desde epsilon máximo: 1.0\")\n",
        "\n",
        "    return dqn, checkpoint_manager, steps_completed, target_total_steps\n",
        "\n",
        "def train_session(dqn, checkpoint_manager, steps_completed, target_total_steps,\n",
        "                  session_steps=400000, save_interval=100000):\n",
        "    \"\"\"\n",
        "    Entrena el agente por un número específico de pasos\n",
        "\n",
        "    Args:\n",
        "        dqn: Agente DQN configurado\n",
        "        checkpoint_manager: Manejador de checkpoints\n",
        "        steps_completed: Pasos ya completados\n",
        "        target_total_steps: Objetivo total de pasos\n",
        "        session_steps: Pasos a entrenar en esta sesión\n",
        "        save_interval: Intervalo para guardar checkpoints automáticos\n",
        "    \"\"\"\n",
        "\n",
        "    remaining_steps = target_total_steps - steps_completed\n",
        "    steps_this_session = min(session_steps, remaining_steps)\n",
        "\n",
        "    if steps_this_session <= 0:\n",
        "        print(\"✓ Entrenamiento completado. No hay más pasos por entrenar.\")\n",
        "        return\n",
        "\n",
        "    print(f\"\\n{'='*60}\")\n",
        "    print(f\"INICIANDO SESIÓN DE ENTRENAMIENTO\")\n",
        "    print(f\"{'='*60}\")\n",
        "    print(f\"Pasos completados: {steps_completed:,}\")\n",
        "    print(f\"Pasos objetivo total: {target_total_steps:,}\")\n",
        "    print(f\"Pasos restantes: {remaining_steps:,}\")\n",
        "    print(f\"Pasos esta sesión: {steps_this_session:,}\")\n",
        "    print(f\"Progreso: {(steps_completed/target_total_steps)*100:.1f}%\")\n",
        "\n",
        "    # Configurar archivos de salida\n",
        "    weights_filename = f'dqn_{env_name}_weights_final.h5f'\n",
        "    log_filename = f'dqn_{env_name}_log.json'\n",
        "\n",
        "    # Callback personalizado para checkpoints automáticos mejorado\n",
        "    class AutoCheckpoint:\n",
        "        def __init__(self, checkpoint_manager, interval, initial_steps):\n",
        "            self.checkpoint_manager = checkpoint_manager\n",
        "            self.interval = interval\n",
        "            self.last_save = initial_steps  # Empezar desde pasos ya completados\n",
        "            self.initial_steps = initial_steps\n",
        "            self.step_count = 0\n",
        "\n",
        "        def on_step_end(self, step, logs):\n",
        "            # Incrementar contador de pasos en esta sesión\n",
        "            self.step_count = step\n",
        "            total_step = self.initial_steps + step\n",
        "\n",
        "            # Verificar si es momento de guardar checkpoint\n",
        "            if total_step - self.last_save >= self.interval:\n",
        "                try:\n",
        "                    # Obtener epsilon actual del agente\n",
        "                    epsilon = getattr(dqn.policy, 'value', 0.1)\n",
        "                    episode = getattr(logs, 'episode', 0)\n",
        "\n",
        "                    print(f\"\\n💾 Guardando checkpoint automático en paso {total_step:,}\")\n",
        "\n",
        "                    # Guardar checkpoint usando nuestro sistema\n",
        "                    self.checkpoint_manager.save_checkpoint(dqn, step, episode, total_step, epsilon)\n",
        "\n",
        "                    self.last_save = total_step\n",
        "                    print(f\"✅ Checkpoint guardado exitosamente\")\n",
        "\n",
        "                except Exception as e:\n",
        "                    print(f\"⚠️ Error guardando checkpoint automático: {e}\")\n",
        "\n",
        "    auto_checkpoint = AutoCheckpoint(checkpoint_manager, save_interval, steps_completed)\n",
        "\n",
        "    # Configurar callbacks estándar - ESTOS SON LOS QUE GUARDAN ARCHIVOS INTERMEDIOS\n",
        "    checkpoint_callback = ModelIntervalCheckpoint(\n",
        "        f'dqn_{env_name}_weights_{{step}}.h5f',\n",
        "        interval=save_interval\n",
        "    )\n",
        "\n",
        "    log_callback = FileLogger(log_filename, interval=100)\n",
        "\n",
        "    # IMPORTANTE: Agregar el callback personalizado A LA LISTA\n",
        "    callbacks = [checkpoint_callback, log_callback]\n",
        "\n",
        "    start_time = time.time()\n",
        "\n",
        "    try:\n",
        "        print(f\"🚀 Entrenando por {steps_this_session:,} pasos...\")\n",
        "        print(f\"💾 Checkpoints automáticos cada {save_interval:,} pasos\")\n",
        "        print(f\"📁 Archivos se guardarán como: dqn_{env_name}_weights_[PASO].h5f\")\n",
        "\n",
        "        # Crear callback personalizado que funcione con keras-rl2\n",
        "        class CustomCallback:\n",
        "            def __init__(self, auto_checkpoint):\n",
        "                self.auto_checkpoint = auto_checkpoint\n",
        "\n",
        "            def on_step_end(self, step, logs=None):\n",
        "                self.auto_checkpoint.on_step_end(step, logs or {})\n",
        "\n",
        "        custom_callback = CustomCallback(auto_checkpoint)\n",
        "\n",
        "        # Agregar callback personalizado si es posible\n",
        "        if hasattr(dqn, 'on_step_end'):\n",
        "            original_on_step_end = dqn.on_step_end\n",
        "\n",
        "            def enhanced_on_step_end(step, logs):\n",
        "                # Llamar función original si existe\n",
        "                if original_on_step_end:\n",
        "                    original_on_step_end(step, logs)\n",
        "                # Llamar nuestro callback\n",
        "                custom_callback.on_step_end(step, logs)\n",
        "\n",
        "            dqn.on_step_end = enhanced_on_step_end\n",
        "\n",
        "        # Entrenar\n",
        "        history = dqn.fit(env, callbacks=callbacks, nb_steps=steps_this_session,\n",
        "                         log_interval=10000, verbose=1)\n",
        "\n",
        "        # Calcular pasos finales de la sesión\n",
        "        final_steps = steps_completed + steps_this_session\n",
        "\n",
        "        # Guardar checkpoint final de la sesión usando nuestro sistema\n",
        "        epsilon = getattr(dqn.policy, 'value', 0.1)\n",
        "        print(f\"\\n💾 Guardando checkpoint final de la sesión...\")\n",
        "        checkpoint_manager.save_checkpoint(dqn, steps_this_session, 0, final_steps, epsilon)\n",
        "\n",
        "        # Guardar pesos finales (archivo \"final\")\n",
        "        print(f\"💾 Guardando archivo final: {weights_filename}\")\n",
        "        dqn.save_weights(weights_filename, overwrite=True)\n",
        "\n",
        "        elapsed_time = time.time() - start_time\n",
        "        progress_pct = (final_steps / target_total_steps) * 100\n",
        "\n",
        "        print(f\"\\n✅ SESIÓN COMPLETADA EXITOSAMENTE\")\n",
        "        print(f\"⏱️  Tiempo transcurrido: {elapsed_time/3600:.2f} horas\")\n",
        "        print(f\"🎯 Pasos totales completados: {final_steps:,}\")\n",
        "        print(f\"📈 Progreso total: {progress_pct:.1f}%\")\n",
        "        print(f\"🎛️  Epsilon final: {epsilon:.4f}\")\n",
        "\n",
        "        # Mostrar archivos guardados\n",
        "        print(f\"\\n📁 ARCHIVOS GUARDADOS:\")\n",
        "        print(f\"  📄 Archivo final: {weights_filename}\")\n",
        "\n",
        "        # Listar checkpoints intermedios creados\n",
        "        current_checkpoints = checkpoint_manager.list_checkpoints()\n",
        "        if current_checkpoints:\n",
        "            print(f\"  📄 Checkpoints intermedios: {current_checkpoints}\")\n",
        "\n",
        "        if final_steps >= target_total_steps:\n",
        "            print(f\"🎉 ¡ENTRENAMIENTO COMPLETADO! Objetivo alcanzado.\")\n",
        "        else:\n",
        "            remaining = target_total_steps - final_steps\n",
        "            estimated_hours = (remaining / steps_this_session) * (elapsed_time / 3600)\n",
        "            print(f\"⏳ Tiempo estimado restante: {estimated_hours:.1f} horas\")\n",
        "\n",
        "        return history\n",
        "\n",
        "    except KeyboardInterrupt:\n",
        "        print(f\"\\n⚠️  Entrenamiento interrumpido por el usuario\")\n",
        "\n",
        "        # Calcular pasos actuales al momento de interrupción\n",
        "        current_step = getattr(auto_checkpoint, 'step_count', 0)\n",
        "        current_total_steps = steps_completed + current_step\n",
        "        epsilon = getattr(dqn.policy, 'value', 0.1)\n",
        "\n",
        "        # Guardar checkpoint de emergencia\n",
        "        print(f\"💾 Guardando checkpoint de emergencia...\")\n",
        "        checkpoint_manager.save_checkpoint(dqn, current_step, 0, current_total_steps, epsilon)\n",
        "\n",
        "        # Guardar pesos actuales\n",
        "        emergency_filename = f'dqn_{env_name}_weights_emergency_{current_total_steps}.h5f'\n",
        "        dqn.save_weights(emergency_filename, overwrite=True)\n",
        "\n",
        "        elapsed_time = time.time() - start_time\n",
        "        print(f\"💾 Checkpoint de emergencia guardado:\")\n",
        "        print(f\"  - Pasos: {current_total_steps:,}\")\n",
        "        print(f\"  - Archivo: {emergency_filename}\")\n",
        "        print(f\"  - Tiempo entrenado: {elapsed_time/60:.1f} minutos\")\n",
        "\n",
        "        raise\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"\\n❌ Error durante el entrenamiento: {e}\")\n",
        "\n",
        "        # Intentar guardar estado actual\n",
        "        try:\n",
        "            current_step = getattr(auto_checkpoint, 'step_count', 0)\n",
        "            current_total_steps = steps_completed + current_step\n",
        "            epsilon = getattr(dqn.policy, 'value', 0.1)\n",
        "\n",
        "            checkpoint_manager.save_checkpoint(dqn, current_step, 0, current_total_steps, epsilon)\n",
        "            print(f\"💾 Estado guardado en paso {current_total_steps:,}\")\n",
        "        except:\n",
        "            print(\"❌ No se pudo guardar estado de emergencia\")\n",
        "\n",
        "        raise"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "scrolled": true,
        "id": "5fAyCbQhfc8a",
        "outputId": "3761f0f8-b1a8-470d-c6b9-45d174152635"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Configurando sesión de entrenamiento...\n",
            "Debug: Buscando archivos de pesos...\n",
            "Debug: Archivos en directorio actual: 31\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_400000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_300000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_100000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_200000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_final.h5f.index\n",
            "Debug: Archivos .h5f.index de SpaceInvaders encontrados: ['dqn_SpaceInvaders-v0_weights_400000.h5f.index', 'dqn_SpaceInvaders-v0_weights_300000.h5f.index', 'dqn_SpaceInvaders-v0_weights_100000.h5f.index', 'dqn_SpaceInvaders-v0_weights_200000.h5f.index', 'dqn_SpaceInvaders-v0_weights_final.h5f.index']\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_400000.h5f.index -> 400000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_400000.h5f (400000 pasos)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_300000.h5f.index -> 300000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_300000.h5f (300000 pasos)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_100000.h5f.index -> 100000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_100000.h5f (100000 pasos)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_200000.h5f (200000 pasos)\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "Debug: Archivos en checkpoints: ['weights_step_200000.h5f.index', 'weights_step_400000.h5f.index']\n",
            "Debug: Archivo weights_step_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo weights_step_400000.h5f.index -> 400000 pasos\n",
            "Debug: Total archivos válidos encontrados: 7\n",
            "Debug: Mejor archivo seleccionado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "✓ Checkpoint cargado desde: dqn_SpaceInvaders-v0_weights_final.h5f\n",
            "  - Pasos: 200,000\n",
            "  - Epsilon: 0.1000\n",
            "  - Fecha: 2025-06-20T00:39:26.382685\n",
            "✓ Epsilon ajustado según progreso real:\n",
            "  - Pasos completados: 200,000\n",
            "  - Progreso annealing: 20.0%\n",
            "  - Epsilon actual: 0.8200\n",
            "\n",
            "Entorno: SpaceInvaders-v0\n",
            "Número de acciones: 6\n",
            "Forma de entrada: (4, 84, 84)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_400000.h5f.index -> 400000 pasos\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_300000.h5f.index -> 300000 pasos\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_100000.h5f.index -> 100000 pasos\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo weights_step_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo weights_step_400000.h5f.index -> 400000 pasos\n",
            "\n",
            "Checkpoints disponibles: [400000, 300000, 200000, 100000]\n",
            "\n",
            "============================================================\n",
            "INICIANDO SESIÓN DE ENTRENAMIENTO\n",
            "============================================================\n",
            "Pasos completados: 200,000\n",
            "Pasos objetivo total: 1,750,000\n",
            "Pasos restantes: 1,550,000\n",
            "Pasos esta sesión: 200,000\n",
            "Progreso: 11.4%\n",
            "🚀 Entrenando por 200,000 pasos...\n",
            "💾 Checkpoints automáticos cada 100,000 pasos\n",
            "Training for 200000 steps ...\n",
            "Interval 1 (0 steps performed)\n",
            "    1/10000 [..............................] - ETA: 3:40 - reward: 0.0000e+00"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-06-20 01:02:59.524510: W tensorflow/c/c_api.cc:300] Operation '{name:'dense_3/kernel/Assign' id:747 op device:{requested: '', assigned: ''} def:{{{node dense_3/kernel/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](dense_3/kernel, dense_3/kernel/Initializer/stateless_random_uniform)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n",
            "2025-06-20 01:02:59.655880: W tensorflow/c/c_api.cc:300] Operation '{name:'total_7/Assign' id:913 op device:{requested: '', assigned: ''} def:{{{node total_7/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](total_7, total_7/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n",
            "2025-06-20 01:02:59.698353: W tensorflow/c/c_api.cc:300] Operation '{name:'activation_4/activation_4/Identity' id:126 op device:{requested: '', assigned: ''} def:{{{node activation_4/activation_4/Identity}} = Identity[T=DT_FLOAT, _has_manual_control_dependencies=true](dense_1/BiasAdd)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "10000/10000 [==============================] - 29s 3ms/step - reward: 0.0147\n",
            "12 episodes - episode_reward: 11.833 [4.000, 25.000] - ale.lives: 2.239\n",
            "\n",
            "Interval 2 (10000 steps performed)\n",
            "10000/10000 [==============================] - 29s 3ms/step - reward: 0.0132\n",
            "14 episodes - episode_reward: 9.786 [5.000, 19.000] - ale.lives: 2.029\n",
            "\n",
            "Interval 3 (20000 steps performed)\n",
            " 3263/10000 [========>.....................] - ETA: 19s - reward: 0.0104done, took 67.988 seconds\n",
            "✓ Checkpoint guardado en paso 400000 (episodio 0)\n",
            "\n",
            "✅ SESIÓN COMPLETADA EXITOSAMENTE\n",
            "⏱️  Tiempo transcurrido: 0.02 horas\n",
            "🎯 Pasos totales completados: 400,000\n",
            "📈 Progreso total: 22.9%\n",
            "🎛️  Epsilon final: 0.8200\n",
            "⏳ Tiempo estimado restante: 0.1 horas\n"
          ]
        }
      ],
      "source": [
        "# ==================== CONFIGURACIÓN Y USO ====================\n",
        "\n",
        "# CONFIGURACIÓN: Cambiar estos parámetros según necesidades\n",
        "CONTINUE_TRAINING = True  # True para continuar, False para empezar desde cero\n",
        "TARGET_TOTAL_STEPS = 1750000  # Objetivo total de pasos\n",
        "SESSION_STEPS = 200000  # Pasos por sesión (aproximadamente 2 horas)\n",
        "CHECKPOINT_INTERVAL = 100000  # Guardar checkpoint cada X pasos\n",
        "\n",
        "print(\"Configurando sesión de entrenamiento...\")\n",
        "dqn, checkpoint_manager, steps_completed, target_total_steps = setup_training_session(\n",
        "    continue_training=CONTINUE_TRAINING,\n",
        "    target_total_steps=TARGET_TOTAL_STEPS\n",
        ")\n",
        "\n",
        "print(f\"\\nEntorno: {env_name}\")\n",
        "print(f\"Número de acciones: {nb_actions}\")\n",
        "print(f\"Forma de entrada: {input_shape}\")\n",
        "\n",
        "# ==================== ENTRENAMIENTO POR SESIONES ====================\n",
        "\n",
        "print(f\"\\nCheckpoints disponibles: {checkpoint_manager.list_checkpoints()}\")\n",
        "\n",
        "# Entrenar una sesión\n",
        "history = train_session(\n",
        "    dqn=dqn,\n",
        "    checkpoint_manager=checkpoint_manager,\n",
        "    steps_completed=steps_completed,\n",
        "    target_total_steps=target_total_steps,\n",
        "    session_steps=SESSION_STEPS,\n",
        "    save_interval=CHECKPOINT_INTERVAL\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jaz4nLh3fc8a"
      },
      "outputs": [],
      "source": [
        "# ==================== COMANDOS ÚTILES PARA GESTIÓN DE ENTRENAMIENTO ====================\n",
        "\n",
        "def show_available_checkpoints():\n",
        "    \"\"\"Muestra información sobre checkpoints disponibles\"\"\"\n",
        "    checkpoint_manager = CheckpointManager(env_name)\n",
        "    best_path, best_steps = checkpoint_manager._find_latest_weights()\n",
        "\n",
        "    print(f\"\\n{'='*50}\")\n",
        "    print(f\"CHECKPOINTS DISPONIBLES\")\n",
        "    print(f\"{'='*50}\")\n",
        "\n",
        "    if best_path:\n",
        "        print(f\"✅ Archivo más reciente: {os.path.basename(best_path)}\")\n",
        "        print(f\"📊 Pasos: {best_steps:,}\")\n",
        "        print(f\"📈 Progreso: {(best_steps/TARGET_TOTAL_STEPS)*100:.1f}%\")\n",
        "\n",
        "        # Mostrar todos los archivos disponibles\n",
        "        print(f\"\\n📁 Todos los archivos de pesos:\")\n",
        "        weight_files = []\n",
        "        try:\n",
        "            current_files = [f for f in os.listdir('.') if f.endswith('.h5f') and env_name in f]\n",
        "            for f in current_files:\n",
        "                steps = checkpoint_manager._extract_steps_from_filename(f)\n",
        "                weight_files.append((f, steps))\n",
        "        except:\n",
        "            pass\n",
        "\n",
        "        weight_files.sort(key=lambda x: x[1], reverse=True)\n",
        "        for file, steps in weight_files:\n",
        "            if steps == 999999:\n",
        "                print(f\"  📄 {file} (final)\")\n",
        "            else:\n",
        "                print(f\"  📄 {file} ({steps:,} pasos)\")\n",
        "    else:\n",
        "        print(\"❌ No se encontraron checkpoints\")\n",
        "\n",
        "    return best_steps\n",
        "\n",
        "def continue_training_session(hours=4):\n",
        "    \"\"\"Continúa el entrenamiento por X horas aproximadamente\"\"\"\n",
        "    steps_per_hour = 100000  # Aproximación\n",
        "    session_steps = int(hours * steps_per_hour)\n",
        "\n",
        "    print(f\"Continuando entrenamiento por aproximadamente {hours} horas...\")\n",
        "    print(f\"Pasos estimados: {session_steps:,}\")\n",
        "\n",
        "    dqn, checkpoint_manager, steps_completed, target_total_steps = setup_training_session(\n",
        "        continue_training=True,\n",
        "        target_total_steps=TARGET_TOTAL_STEPS\n",
        "    )\n",
        "\n",
        "    return train_session(\n",
        "        dqn=dqn,\n",
        "        checkpoint_manager=checkpoint_manager,\n",
        "        steps_completed=steps_completed,\n",
        "        target_total_steps=target_total_steps,\n",
        "        session_steps=session_steps,\n",
        "        save_interval=CHECKPOINT_INTERVAL\n",
        "    )\n",
        "def quick_test():\n",
        "    \"\"\"Realiza una evaluación rápida del modelo actual\"\"\"\n",
        "    try:\n",
        "        dqn, checkpoint_manager, _, _ = setup_training_session(continue_training=True)\n",
        "        print(\"Evaluando modelo actual...\")\n",
        "        test_results = dqn.test(env, nb_episodes=5, visualize=False)\n",
        "        mean_reward = np.mean(test_results.history['episode_reward'])\n",
        "        print(f\"Recompensa media (5 episodios): {mean_reward:.2f}\")\n",
        "        return mean_reward\n",
        "    except Exception as e:\n",
        "        print(f\"Error en evaluación: {e}\")\n",
        "        return None\n",
        "\n",
        "def show_training_status():\n",
        "    \"\"\"Muestra el estado actual del entrenamiento\"\"\"\n",
        "    checkpoint_manager = CheckpointManager(env_name)\n",
        "\n",
        "    if os.path.exists(checkpoint_manager.metadata_file):\n",
        "        with open(checkpoint_manager.metadata_file, 'r') as f:\n",
        "            data = json.load(f)\n",
        "\n",
        "        progress = (data['total_steps'] / TARGET_TOTAL_STEPS) * 100\n",
        "        remaining = TARGET_TOTAL_STEPS - data['total_steps']\n",
        "\n",
        "        print(f\"\\n{'='*50}\")\n",
        "        print(f\"ESTADO DEL ENTRENAMIENTO\")\n",
        "        print(f\"{'='*50}\")\n",
        "        print(f\"Pasos completados: {data['total_steps']:,}\")\n",
        "        print(f\"Pasos objetivo: {TARGET_TOTAL_STEPS:,}\")\n",
        "        print(f\"Progreso: {progress:.1f}%\")\n",
        "        print(f\"Pasos restantes: {remaining:,}\")\n",
        "        print(f\"Epsilon actual: {data['epsilon']:.4f}\")\n",
        "        print(f\"Último guardado: {data['timestamp']}\")\n",
        "        print(f\"{'='*50}\")\n",
        "    else:\n",
        "        print(\"No hay entrenamiento previo. Comenzar desde cero.\")\n",
        "\n",
        "def diagnose_checkpoints():\n",
        "    \"\"\"Diagnostica problemas con checkpoints y archivos\"\"\"\n",
        "    checkpoint_manager = CheckpointManager(env_name)\n",
        "\n",
        "    print(f\"\\n{'='*60}\")\n",
        "    print(f\"DIAGNÓSTICO DE CHECKPOINTS\")\n",
        "    print(f\"{'='*60}\")\n",
        "\n",
        "    # Verificar directorio actual (donde están realmente los archivos)\n",
        "    print(f\"📁 DIRECTORIO ACTUAL:\")\n",
        "    current_files = [f for f in os.listdir('.') if 'SpaceInvaders' in f and f.endswith('.h5f')]\n",
        "    if current_files:\n",
        "        print(f\"✅ Archivos de pesos encontrados en directorio actual:\")\n",
        "        for file in sorted(current_files):\n",
        "            if os.path.exists(file):\n",
        "                size = os.path.getsize(file) / (1024*1024)  # MB\n",
        "                mod_time = os.path.getmtime(file)\n",
        "                mod_str = datetime.fromtimestamp(mod_time).strftime('%Y-%m-%d %H:%M:%S')\n",
        "                print(f\"  📄 {file} ({size:.1f} MB) - {mod_str}\")\n",
        "    else:\n",
        "        print(\"❌ No se encontraron archivos en directorio actual\")\n",
        "\n",
        "    # Extraer información de los archivos\n",
        "    weight_info = []\n",
        "    for file in current_files:\n",
        "        if '_weights_' in file and '.h5f' in file:\n",
        "            try:\n",
        "                # Extraer número de pasos del nombre del archivo\n",
        "                if 'final' in file:\n",
        "                    steps = 'final'\n",
        "                else:\n",
        "                    parts = file.split('_')\n",
        "                    for i, part in enumerate(parts):\n",
        "                        if part.isdigit():\n",
        "                            steps = int(part)\n",
        "                            break\n",
        "                    else:\n",
        "                        steps = 0\n",
        "\n",
        "                weight_info.append({\n",
        "                    'file': file,\n",
        "                    'steps': steps,\n",
        "                    'size': os.path.getsize(file),\n",
        "                    'mtime': os.path.getmtime(file)\n",
        "                })\n",
        "            except:\n",
        "                continue\n",
        "\n",
        "    # Ordenar por pasos (más alto primero)\n",
        "    weight_info.sort(key=lambda x: x['steps'] if isinstance(x['steps'], int) else 999999, reverse=True)\n",
        "\n",
        "    print(f\"\\n🎯 ANÁLISIS DE ARCHIVOS DE PESOS:\")\n",
        "    for info in weight_info:\n",
        "        steps_str = f\"{info['steps']:,}\" if isinstance(info['steps'], int) else info['steps']\n",
        "        mod_str = datetime.fromtimestamp(info['mtime']).strftime('%H:%M:%S')\n",
        "        print(f\"  🎮 {steps_str} pasos - {info['file']} ({mod_str})\")\n",
        "\n",
        "    # Verificar directorio de checkpoints\n",
        "    print(f\"\\n📁 DIRECTORIO CHECKPOINTS:\")\n",
        "    print(f\"Ruta: {checkpoint_manager.checkpoint_dir}\")\n",
        "    print(f\"Existe: {os.path.exists(checkpoint_manager.checkpoint_dir)}\")\n",
        "\n",
        "    if os.path.exists(checkpoint_manager.checkpoint_dir):\n",
        "        try:\n",
        "            checkpoint_files = os.listdir(checkpoint_manager.checkpoint_dir)\n",
        "            if checkpoint_files:\n",
        "                print(f\"Archivos en checkpoints:\")\n",
        "                for file in checkpoint_files:\n",
        "                    print(f\"  📄 {file}\")\n",
        "            else:\n",
        "                print(\"📂 Carpeta checkpoints vacía\")\n",
        "        except PermissionError:\n",
        "            print(\"❌ Sin permisos para leer carpeta checkpoints\")\n",
        "\n",
        "    # Verificar metadata\n",
        "    print(f\"\\n📋 METADATA:\")\n",
        "    print(f\"Archivo: {checkpoint_manager.metadata_file}\")\n",
        "    print(f\"Existe: {os.path.exists(checkpoint_manager.metadata_file)}\")\n",
        "\n",
        "    if os.path.exists(checkpoint_manager.metadata_file):\n",
        "        try:\n",
        "            with open(checkpoint_manager.metadata_file, 'r') as f:\n",
        "                data = json.load(f)\n",
        "            print(f\"📊 Según metadata:\")\n",
        "            print(f\"  - Pasos: {data['total_steps']:,}\")\n",
        "            print(f\"  - Epsilon: {data['epsilon']:.4f}\")\n",
        "            print(f\"  - Archivo esperado: {data['weights_file']}\")\n",
        "\n",
        "            # Comparar con archivos reales\n",
        "            if weight_info:\n",
        "                latest_real = weight_info[0]\n",
        "                if isinstance(latest_real['steps'], int):\n",
        "                    if latest_real['steps'] > data['total_steps']:\n",
        "                        print(f\"⚠️  INCONSISTENCIA: Archivo más reciente ({latest_real['steps']:,}) > Metadata ({data['total_steps']:,})\")\n",
        "                        return latest_real['file'], latest_real['steps']\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"❌ Error leyendo metadata: {e}\")\n",
        "\n",
        "    # Retornar mejor archivo disponible\n",
        "    if weight_info:\n",
        "        best = weight_info[0]\n",
        "        return best['file'], best['steps']\n",
        "\n",
        "    return None, 0\n",
        "\n",
        "def continue_training_session(hours=4):\n",
        "    \"\"\"Continúa el entrenamiento por X horas aproximadamente\"\"\"\n",
        "    steps_per_hour = 100000  # Aproximación\n",
        "    session_steps = int(hours * steps_per_hour)\n",
        "\n",
        "    print(f\"Continuando entrenamiento por aproximadamente {hours} horas...\")\n",
        "    print(f\"Pasos estimados: {session_steps:,}\")\n",
        "\n",
        "    dqn, checkpoint_manager, steps_completed, target_total_steps = setup_training_session(\n",
        "        continue_training=True,\n",
        "        target_total_steps=TARGET_TOTAL_STEPS\n",
        "    )\n",
        "\n",
        "    return train_session(\n",
        "        dqn=dqn,\n",
        "        checkpoint_manager=checkpoint_manager,\n",
        "        steps_completed=steps_completed,\n",
        "        target_total_steps=target_total_steps,\n",
        "        session_steps=session_steps,\n",
        "        save_interval=CHECKPOINT_INTERVAL\n",
        "    )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iLynXalofc8b",
        "outputId": "2280f045-ec18-4833-b3e7-fb8c07a60cbe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Configurando sesión de entrenamiento...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super().__init__(name, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Debug: Buscando archivos de pesos...\n",
            "Debug: Archivos en directorio actual: 13\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_final.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivos .h5f.index de SpaceInvaders encontrados: ['dqn_SpaceInvaders-v0_weights_final.h5f.index', 'dqn_SpaceInvaders-v0_weights_focused.h5f.index']\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "Debug: No se pudo extraer pasos de: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivos en checkpoints: []\n",
            "Debug: Total archivos válidos encontrados: 1\n",
            "Debug: Mejor archivo seleccionado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "✓ Checkpoint cargado desde: dqn_SpaceInvaders-v0_weights_final.h5f\n",
            "  - Pasos: 0\n",
            "  - Epsilon estimado: 1.0000\n",
            "✓ Iniciando desde epsilon máximo: 1.0\n",
            "SpaceInvaders-v0\n",
            "No hay entrenamiento previo. Comenzar desde cero.\n",
            "Continuando entrenamiento por aproximadamente 2 horas...\n",
            "Pasos estimados: 200,000\n",
            "Debug: Buscando archivos de pesos...\n",
            "Debug: Archivos en directorio actual: 13\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_final.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivos .h5f.index de SpaceInvaders encontrados: ['dqn_SpaceInvaders-v0_weights_final.h5f.index', 'dqn_SpaceInvaders-v0_weights_focused.h5f.index']\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "Debug: No se pudo extraer pasos de: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivos en checkpoints: []\n",
            "Debug: Total archivos válidos encontrados: 1\n",
            "Debug: Mejor archivo seleccionado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "✓ Checkpoint cargado desde: dqn_SpaceInvaders-v0_weights_final.h5f\n",
            "  - Pasos: 0\n",
            "  - Epsilon estimado: 1.0000\n",
            "✓ Iniciando desde epsilon máximo: 1.0\n",
            "\n",
            "============================================================\n",
            "INICIANDO SESIÓN DE ENTRENAMIENTO\n",
            "============================================================\n",
            "Pasos completados: 0\n",
            "Pasos objetivo total: 1,750,000\n",
            "Pasos restantes: 1,750,000\n",
            "Pasos esta sesión: 200,000\n",
            "Progreso: 0.0%\n",
            "🚀 Entrenando por 200,000 pasos...\n",
            "💾 Checkpoints automáticos cada 100,000 pasos\n",
            "📁 Archivos se guardarán como: dqn_SpaceInvaders-v0_weights_[PASO].h5f\n",
            "Training for 200000 steps ...\n",
            "Interval 1 (0 steps performed)\n",
            "    1/10000 [..............................] - ETA: 27:56 - reward: 0.0000e+00"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/engine/training_v1.py:2359: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n",
            "  updates=self.state_updates,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " 2687/10000 [=======>......................] - ETA: 42s - reward: 0.0123done, took 15.897 seconds\n",
            "\n",
            "💾 Guardando checkpoint final de la sesión...\n",
            "✓ Checkpoint guardado en paso 200000 (episodio 0)\n",
            "💾 Guardando archivo final: dqn_SpaceInvaders-v0_weights_final.h5f\n",
            "\n",
            "✅ SESIÓN COMPLETADA EXITOSAMENTE\n",
            "⏱️  Tiempo transcurrido: 0.00 horas\n",
            "🎯 Pasos totales completados: 200,000\n",
            "📈 Progreso total: 11.4%\n",
            "🎛️  Epsilon final: 0.1000\n",
            "\n",
            "📁 ARCHIVOS GUARDADOS:\n",
            "  📄 Archivo final: dqn_SpaceInvaders-v0_weights_final.h5f\n",
            "Debug: No se pudo extraer pasos de: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivo weights_step_200000.h5f.index -> 200000 pasos\n",
            "  📄 Checkpoints intermedios: [200000]\n",
            "⏳ Tiempo estimado restante: 0.0 horas\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7808663f6310>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "# ==================== CONTINUAR ENTRENAMIENTO DESDE CHECKPOINT ====================\n",
        "\n",
        "# Ver estado actual\n",
        "print(env_name)\n",
        "show_training_status()\n",
        "\n",
        "# Entrenar 4 horas más\n",
        "continue_training_session(hours=2)\n",
        "\n",
        "# Evaluación rápida\n",
        "#quick_test()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "70bLVJGUfc8b",
        "outputId": "6fcc8aa1-6cd8-4986-e082-b686d161a7ef"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "SpaceInvaders-v0\n",
            "\n",
            "==================================================\n",
            "ESTADO DEL ENTRENAMIENTO\n",
            "==================================================\n",
            "Pasos completados: 1,750,000\n",
            "Pasos objetivo: 1,750,000\n",
            "Progreso: 100.0%\n",
            "Pasos restantes: 0\n",
            "Epsilon actual: 0.1000\n",
            "Último guardado: 2025-06-20T04:25:57.548326\n",
            "==================================================\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-06-20 12:21:42.648696: W tensorflow/c/c_api.cc:300] Operation '{name:'conv2d_2_4/bias/Assign' id:1425 op device:{requested: '', assigned: ''} def:{{{node conv2d_2_4/bias/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](conv2d_2_4/bias, conv2d_2_4/bias/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n",
            "2025-06-20 12:21:42.839530: W tensorflow/c/c_api.cc:300] Operation '{name:'count_14/Assign' id:1607 op device:{requested: '', assigned: ''} def:{{{node count_14/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](count_14, count_14/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Debug: Buscando archivos de pesos...\n",
            "Debug: Archivos en directorio actual: 34\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_400000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_300000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_100000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_200000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_final.h5f.index\n",
            "Debug: Archivos .h5f.index de SpaceInvaders encontrados: ['dqn_SpaceInvaders-v0_weights_400000.h5f.index', 'dqn_SpaceInvaders-v0_weights_300000.h5f.index', 'dqn_SpaceInvaders-v0_weights_100000.h5f.index', 'dqn_SpaceInvaders-v0_weights_focused.h5f.index', 'dqn_SpaceInvaders-v0_weights_200000.h5f.index', 'dqn_SpaceInvaders-v0_weights_final.h5f.index']\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_400000.h5f.index -> 400000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_400000.h5f (400000 pasos)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_300000.h5f.index -> 300000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_300000.h5f (300000 pasos)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_100000.h5f.index -> 100000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_100000.h5f (100000 pasos)\n",
            "Debug: No se pudo extraer pasos de: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_200000.h5f (200000 pasos)\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "Debug: Archivos en checkpoints: ['weights_step_800000.h5f.index', 'weights_step_200000.h5f.index', 'weights_step_400000.h5f.index', 'weights_step_1600000.h5f.index', 'weights_step_600000.h5f.index', 'weights_step_1750000.h5f.index']\n",
            "Debug: Archivo weights_step_800000.h5f.index -> 800000 pasos\n",
            "Debug: Archivo weights_step_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo weights_step_400000.h5f.index -> 400000 pasos\n",
            "Debug: Archivo weights_step_1600000.h5f.index -> 1600000 pasos\n",
            "Debug: Archivo weights_step_600000.h5f.index -> 600000 pasos\n",
            "Debug: Archivo weights_step_1750000.h5f.index -> 1750000 pasos\n",
            "Debug: Total archivos válidos encontrados: 11\n",
            "Debug: Mejor archivo seleccionado: checkpoints/SpaceInvaders-v0/weights_step_1750000.h5f (1750000 pasos)\n",
            "✓ Checkpoint cargado desde: checkpoints/SpaceInvaders-v0/weights_step_1750000.h5f\n",
            "  - Pasos: 1,750,000\n",
            "  - Epsilon: 0.1000\n",
            "  - Fecha: 2025-06-20T04:25:57.548326\n",
            "✓ Epsilon ajustado según progreso real:\n",
            "  - Pasos completados: 1,750,000\n",
            "  - Progreso annealing: 100.0%\n",
            "  - Epsilon actual: 0.1000\n",
            "Evaluando modelo actual...\n",
            "Testing for 5 episodes ...\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/opt/conda/lib/python3.11/site-packages/keras/engine/training_v1.py:2359: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n",
            "  updates=self.state_updates,\n",
            "2025-06-20 12:21:42.919054: W tensorflow/c/c_api.cc:300] Operation '{name:'activation_4/activation_4/Identity' id:126 op device:{requested: '', assigned: ''} def:{{{node activation_4/activation_4/Identity}} = Identity[T=DT_FLOAT, _has_manual_control_dependencies=true](dense_1/BiasAdd)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Episode 1: reward: 12.000, steps: 941\n",
            "Episode 2: reward: 6.000, steps: 368\n",
            "Episode 3: reward: 12.000, steps: 629\n",
            "Episode 4: reward: 16.000, steps: 519\n",
            "Episode 5: reward: 19.000, steps: 888\n",
            "Recompensa media (5 episodios): 13.00\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "13.0"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Ver estado actual\n",
        "print(env_name)\n",
        "show_training_status()\n",
        "\n",
        "# Evaluación rápida\n",
        "quick_test()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wJBQO6X5fc8b",
        "outputId": "45c67d4f-0c16-4ae7-9ec6-415292b0f699"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaluando el modelo entrenado...\n",
            "Testing for 10 episodes ...\n",
            "Episode 1: reward: 8.000, steps: 402\n",
            "Episode 2: reward: 12.000, steps: 671\n",
            "Episode 3: reward: 8.000, steps: 630\n",
            "Episode 4: reward: 17.000, steps: 757\n",
            "Episode 5: reward: 14.000, steps: 920\n",
            "Episode 6: reward: 9.000, steps: 632\n",
            "Episode 7: reward: 19.000, steps: 955\n",
            "Episode 8: reward: 9.000, steps: 388\n",
            "Episode 9: reward: 8.000, steps: 490\n",
            "Episode 10: reward: 8.000, steps: 643\n",
            "Recompensa media en test: 11.20\n",
            "Desviación estándar: 3.92\n",
            "Recompensa máxima: 19.0\n",
            "Recompensa mínima: 8.0\n"
          ]
        }
      ],
      "source": [
        "# ==================== EVALUACIÓN ====================\n",
        "\n",
        "print(\"Evaluando el modelo entrenado...\")\n",
        "\n",
        "# PARA EVITAR ERROR CUANDO EL MODELO YA ESTA ENTRENADO Y LA VARIABLE NO ES DEFINIDA\n",
        "weights_filename = \"dqn_SpaceInvaders-v0_weights_final.h5f\"\n",
        "\n",
        "# Cargar los mejores pesos\n",
        "dqn.load_weights(weights_filename)\n",
        "\n",
        "# Evaluar el agente en 10 episodios\n",
        "test_results = dqn.test(env, nb_episodes=10, visualize=False)\n",
        "\n",
        "print(f\"Recompensa media en test: {np.mean(test_results.history['episode_reward']):.2f}\")\n",
        "print(f\"Desviación estándar: {np.std(test_results.history['episode_reward']):.2f}\")\n",
        "print(f\"Recompensa máxima: {np.max(test_results.history['episode_reward'])}\")\n",
        "print(f\"Recompensa mínima: {np.min(test_results.history['episode_reward'])}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ALRKPu5Lfc8c",
        "outputId": "c9cb60d4-27ba-414c-aa2b-b3a290cfb407"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "🎛️ PROBANDO DIFERENTES VALORES DE EPSILON\n",
            "==================================================\n",
            "\n",
            "🧪 Probando epsilon = 0.01\n",
            "Testing for 5 episodes ...\n",
            "Episode 1: reward: 9.000, steps: 407\n",
            "Episode 2: reward: 25.000, steps: 1221\n",
            "Episode 3: reward: 19.000, steps: 847\n",
            "Episode 4: reward: 16.000, steps: 1286\n",
            "Episode 5: reward: 15.000, steps: 614\n",
            "   📊 Media: 16.80\n",
            "\n",
            "🧪 Probando epsilon = 0.02\n",
            "Testing for 5 episodes ...\n",
            "Episode 1: reward: 8.000, steps: 548\n",
            "Episode 2: reward: 14.000, steps: 806\n",
            "Episode 3: reward: 10.000, steps: 781\n",
            "Episode 4: reward: 18.000, steps: 1041\n",
            "Episode 5: reward: 9.000, steps: 866\n",
            "   📊 Media: 11.80\n",
            "\n",
            "🧪 Probando epsilon = 0.05\n",
            "Testing for 5 episodes ...\n",
            "Episode 1: reward: 14.000, steps: 660\n",
            "Episode 2: reward: 11.000, steps: 814\n",
            "Episode 3: reward: 13.000, steps: 924\n",
            "Episode 4: reward: 10.000, steps: 719\n",
            "Episode 5: reward: 12.000, steps: 658\n",
            "   📊 Media: 12.00\n",
            "\n",
            "🧪 Probando epsilon = 0.1\n",
            "Testing for 5 episodes ...\n",
            "Episode 1: reward: 9.000, steps: 558\n",
            "Episode 2: reward: 10.000, steps: 580\n",
            "Episode 3: reward: 15.000, steps: 741\n",
            "Episode 4: reward: 14.000, steps: 765\n",
            "Episode 5: reward: 18.000, steps: 694\n",
            "   📊 Media: 13.20\n",
            "\n",
            "🏆 MEJOR EPSILON: 0.01\n",
            "🏆 MEJOR MEDIA: 16.80\n",
            "✅ Epsilon configurado a 0.01\n",
            "Testing for 10 episodes ...\n",
            "Episode 1: reward: 9.000, steps: 628\n",
            "Episode 2: reward: 23.000, steps: 1172\n",
            "Episode 3: reward: 19.000, steps: 1129\n",
            "Episode 4: reward: 18.000, steps: 912\n",
            "Episode 5: reward: 3.000, steps: 545\n",
            "Episode 6: reward: 25.000, steps: 1050\n",
            "Episode 7: reward: 18.000, steps: 1100\n",
            "Episode 8: reward: 15.000, steps: 828\n",
            "Episode 9: reward: 19.000, steps: 1022\n",
            "Episode 10: reward: 9.000, steps: 548\n",
            "Recompensa media en test: 15.80\n",
            "Desviación estándar: 6.51\n",
            "Recompensa máxima: 25.0\n",
            "Recompensa mínima: 3.0\n"
          ]
        }
      ],
      "source": [
        "# # ==================== INTENTO DE OPTIMIZAR RESULTADO 1 ====================\n",
        "# Probar diferentes valores de epsilon\n",
        "print(\"\\n🎛️ PROBANDO DIFERENTES VALORES DE EPSILON\")\n",
        "print(\"=\"*50)\n",
        "\n",
        "epsilons = [0.01, 0.02, 0.05, 0.1]\n",
        "results = {}\n",
        "\n",
        "for eps in epsilons:\n",
        "    print(f\"\\n🧪 Probando epsilon = {eps}\")\n",
        "    dqn.policy.value = eps\n",
        "\n",
        "    test_results = dqn.test(env, nb_episodes=5, visualize=False)\n",
        "    mean_reward = np.mean(test_results.history['episode_reward'])\n",
        "\n",
        "    results[eps] = mean_reward\n",
        "    print(f\"   📊 Media: {mean_reward:.2f}\")\n",
        "\n",
        "best_eps = max(results, key=results.get)\n",
        "best_mean = results[best_eps]\n",
        "\n",
        "print(f\"\\n🏆 MEJOR EPSILON: {best_eps}\")\n",
        "print(f\"🏆 MEJOR MEDIA: {best_mean:.2f}\")\n",
        "\n",
        "# Configurar el mejor epsilon\n",
        "dqn.policy.value = best_eps\n",
        "print(f\"✅ Epsilon configurado a {best_eps}\")\n",
        "\n",
        "# Evaluar el agente en 10 episodios\n",
        "test_results = dqn.test(env, nb_episodes=10, visualize=False)\n",
        "\n",
        "print(f\"Recompensa media en test: {np.mean(test_results.history['episode_reward']):.2f}\")\n",
        "print(f\"Desviación estándar: {np.std(test_results.history['episode_reward']):.2f}\")\n",
        "print(f\"Recompensa máxima: {np.max(test_results.history['episode_reward'])}\")\n",
        "print(f\"Recompensa mínima: {np.min(test_results.history['episode_reward'])}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bnoYzIE1fc8c",
        "outputId": "55ec3940-0c47-4739-e7e5-33dbd3642c8e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "🎯 ENTRENAMIENTO ENFOCADO\n",
            "==================================================\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/opt/conda/lib/python3.11/site-packages/keras/optimizers/legacy/adam.py:117: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super().__init__(name, **kwargs)\n",
            "2025-06-20 04:49:12.002014: W tensorflow/c/c_api.cc:300] Operation '{name:'conv2d_10/kernel/Assign' id:4541 op device:{requested: '', assigned: ''} def:{{{node conv2d_10/kernel/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](conv2d_10/kernel, conv2d_10/kernel/Initializer/stateless_random_uniform)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "🚀 Entrenando 200K pasos adicionales...\n",
            "Training for 200000 steps ...\n",
            "Interval 1 (0 steps performed)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/opt/conda/lib/python3.11/site-packages/keras/engine/training_v1.py:2359: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n",
            "  updates=self.state_updates,\n",
            "2025-06-20 04:49:12.288455: W tensorflow/c/c_api.cc:300] Operation '{name:'activation_4/activation_4/Identity' id:126 op device:{requested: '', assigned: ''} def:{{{node activation_4/activation_4/Identity}} = Identity[T=DT_FLOAT, _has_manual_control_dependencies=true](dense_1/BiasAdd)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n",
            "2025-06-20 04:49:12.373303: W tensorflow/c/c_api.cc:300] Operation '{name:'count_28/Assign' id:4756 op device:{requested: '', assigned: ''} def:{{{node count_28/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](count_28, count_28/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "10000/10000 [==============================] - 30s 3ms/step - reward: 0.0177\n",
            "15 episodes - episode_reward: 11.333 [2.000, 22.000] - ale.lives: 2.111\n",
            "\n",
            "Interval 2 (10000 steps performed)\n",
            "10000/10000 [==============================] - 30s 3ms/step - reward: 0.0178\n",
            "14 episodes - episode_reward: 12.643 [6.000, 26.000] - ale.lives: 2.182\n",
            "\n",
            "Interval 3 (20000 steps performed)\n",
            "10000/10000 [==============================] - 29s 3ms/step - reward: 0.0168\n",
            "15 episodes - episode_reward: 11.600 [8.000, 18.000] - ale.lives: 2.107\n",
            "\n",
            "Interval 4 (30000 steps performed)\n",
            "10000/10000 [==============================] - 30s 3ms/step - reward: 0.0191\n",
            "14 episodes - episode_reward: 13.429 [2.000, 25.000] - ale.lives: 2.114\n",
            "\n",
            "Interval 5 (40000 steps performed)\n",
            "10000/10000 [==============================] - 30s 3ms/step - reward: 0.0181\n",
            "15 episodes - episode_reward: 12.200 [3.000, 22.000] - ale.lives: 2.119\n",
            "\n",
            "Interval 6 (50000 steps performed)\n",
            "    1/10000 [..............................] - ETA: 2:52 - reward: 0.0000e+00"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-06-20 04:51:42.026228: W tensorflow/c/c_api.cc:300] Operation '{name:'activation_4_8/activation_4/Identity' id:4650 op device:{requested: '', assigned: ''} def:{{{node activation_4_8/activation_4/Identity}} = Identity[T=DT_FLOAT, _has_manual_control_dependencies=true](dense_1_8/BiasAdd)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n",
            "2025-06-20 04:51:42.257822: W tensorflow/c/c_api.cc:300] Operation '{name:'loss_33/AddN' id:4882 op device:{requested: '', assigned: ''} def:{{{node loss_33/AddN}} = AddN[N=2, T=DT_FLOAT, _has_manual_control_dependencies=true](loss_33/mul, loss_33/mul_1)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n",
            "2025-06-20 04:51:42.365730: W tensorflow/c/c_api.cc:300] Operation '{name:'training_8/Adam/conv2d_2/bias/m/Assign' id:5118 op device:{requested: '', assigned: ''} def:{{{node training_8/Adam/conv2d_2/bias/m/Assign}} = AssignVariableOp[_has_manual_control_dependencies=true, dtype=DT_FLOAT, validate_shape=false](training_8/Adam/conv2d_2/bias/m, training_8/Adam/conv2d_2/bias/m/Initializer/zeros)}}' was changed by setting attribute after it was run by a session. This mutation will have no effect, and will trigger an error in the future. Either don't modify nodes after running them or create a new session.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "10000/10000 [==============================] - 184s 18ms/step - reward: 0.0171\n",
            "13 episodes - episode_reward: 12.769 [5.000, 20.000] - loss: 0.015 - mae: 1.977 - mean_q: 2.401 - mean_eps: 0.780 - ale.lives: 2.122\n",
            "\n",
            "Interval 7 (60000 steps performed)\n",
            "10000/10000 [==============================] - 186s 19ms/step - reward: 0.0155\n",
            "15 episodes - episode_reward: 10.400 [3.000, 18.000] - loss: 0.013 - mae: 1.996 - mean_q: 2.417 - mean_eps: 0.773 - ale.lives: 2.173\n",
            "\n",
            "Interval 8 (70000 steps performed)\n",
            "10000/10000 [==============================] - 185s 18ms/step - reward: 0.0151\n",
            "15 episodes - episode_reward: 10.533 [5.000, 21.000] - loss: 0.013 - mae: 2.029 - mean_q: 2.456 - mean_eps: 0.766 - ale.lives: 2.215\n",
            "\n",
            "Interval 9 (80000 steps performed)\n",
            "10000/10000 [==============================] - 187s 19ms/step - reward: 0.0167\n",
            "13 episodes - episode_reward: 12.077 [4.000, 21.000] - loss: 0.013 - mae: 2.051 - mean_q: 2.483 - mean_eps: 0.759 - ale.lives: 2.155\n",
            "\n",
            "Interval 10 (90000 steps performed)\n",
            "10000/10000 [==============================] - 187s 19ms/step - reward: 0.0179\n",
            "14 episodes - episode_reward: 13.429 [7.000, 26.000] - loss: 0.012 - mae: 2.071 - mean_q: 2.508 - mean_eps: 0.752 - ale.lives: 2.155\n",
            "\n",
            "Interval 11 (100000 steps performed)\n",
            "10000/10000 [==============================] - 188s 19ms/step - reward: 0.0189\n",
            "13 episodes - episode_reward: 13.846 [6.000, 26.000] - loss: 0.013 - mae: 2.090 - mean_q: 2.531 - mean_eps: 0.744 - ale.lives: 2.058\n",
            "\n",
            "Interval 12 (110000 steps performed)\n",
            "10000/10000 [==============================] - 189s 19ms/step - reward: 0.0179\n",
            "16 episodes - episode_reward: 11.750 [1.000, 29.000] - loss: 0.013 - mae: 2.123 - mean_q: 2.572 - mean_eps: 0.737 - ale.lives: 2.082\n",
            "\n",
            "Interval 13 (120000 steps performed)\n",
            "10000/10000 [==============================] - 190s 19ms/step - reward: 0.0188\n",
            "15 episodes - episode_reward: 11.867 [6.000, 18.000] - loss: 0.013 - mae: 2.150 - mean_q: 2.606 - mean_eps: 0.730 - ale.lives: 2.122\n",
            "\n",
            "Interval 14 (130000 steps performed)\n",
            "10000/10000 [==============================] - 192s 19ms/step - reward: 0.0183\n",
            "16 episodes - episode_reward: 12.125 [6.000, 18.000] - loss: 0.013 - mae: 2.189 - mean_q: 2.653 - mean_eps: 0.723 - ale.lives: 2.160\n",
            "\n",
            "Interval 15 (140000 steps performed)\n",
            "10000/10000 [==============================] - 192s 19ms/step - reward: 0.0195\n",
            "14 episodes - episode_reward: 13.143 [7.000, 22.000] - loss: 0.013 - mae: 2.195 - mean_q: 2.662 - mean_eps: 0.716 - ale.lives: 2.128\n",
            "\n",
            "Interval 16 (150000 steps performed)\n",
            "10000/10000 [==============================] - 194s 19ms/step - reward: 0.0188\n",
            "12 episodes - episode_reward: 16.167 [8.000, 28.000] - loss: 0.013 - mae: 2.228 - mean_q: 2.702 - mean_eps: 0.708 - ale.lives: 2.132\n",
            "\n",
            "Interval 17 (160000 steps performed)\n",
            "10000/10000 [==============================] - 195s 20ms/step - reward: 0.0168\n",
            "15 episodes - episode_reward: 10.600 [4.000, 30.000] - loss: 0.013 - mae: 2.265 - mean_q: 2.747 - mean_eps: 0.701 - ale.lives: 2.255\n",
            "\n",
            "Interval 18 (170000 steps performed)\n",
            "10000/10000 [==============================] - 197s 20ms/step - reward: 0.0159\n",
            "16 episodes - episode_reward: 10.000 [3.000, 18.000] - loss: 0.013 - mae: 2.286 - mean_q: 2.773 - mean_eps: 0.694 - ale.lives: 2.177\n",
            "\n",
            "Interval 19 (180000 steps performed)\n",
            "10000/10000 [==============================] - 200s 20ms/step - reward: 0.0192\n",
            "13 episodes - episode_reward: 15.231 [6.000, 26.000] - loss: 0.013 - mae: 2.317 - mean_q: 2.810 - mean_eps: 0.687 - ale.lives: 2.209\n",
            "\n",
            "Interval 20 (190000 steps performed)\n",
            "10000/10000 [==============================] - 199s 20ms/step - reward: 0.0190\n",
            "done, took 3015.342 seconds\n",
            "💾 Modelo guardado como: dqn_SpaceInvaders-v0_weights_focused.h5f\n"
          ]
        }
      ],
      "source": [
        "# # ==================== INTENTO DE OPTIMIZAR RESULTADO 2 ====================\n",
        "# Entrenamiento enfocado\n",
        "from tensorflow.keras.optimizers.legacy import Adam\n",
        "\n",
        "print(\"\\n🎯 ENTRENAMIENTO ENFOCADO\")\n",
        "print(\"=\"*50)\n",
        "\n",
        "# QUITAR COMENTARIOS EN LAS LINEAS SIGUIENTES PARA VOLVER A ENTRENAR\n",
        "# # Configurar para fine-tuning\n",
        "# dqn.policy.value = 0.02  # Muy poca exploración\n",
        "# dqn.compile(Adam(lr=0.0001), metrics=['mae'])  # Learning rate bajo\n",
        "\n",
        "# print(\"🚀 Entrenando 200K pasos adicionales...\")\n",
        "# history = dqn.fit(env, nb_steps=200000, log_interval=10000, verbose=1)\n",
        "\n",
        "# # Guardar resultado\n",
        "# dqn.save_weights('dqn_SpaceInvaders-v0_weights_focused.h5f', overwrite=True)\n",
        "# print(\"💾 Modelo guardado como: dqn_SpaceInvaders-v0_weights_focused.h5f\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cTJQTCyPfc8c",
        "outputId": "3e1669d7-53f8-4a46-c456-fa09dea12f53"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 EVALUACIÓN FINAL\n",
            "==================================================\n",
            "Testing for 10 episodes ...\n",
            "Episode 1: reward: 10.000, steps: 644\n",
            "Episode 2: reward: 10.000, steps: 476\n",
            "Episode 3: reward: 14.000, steps: 850\n",
            "Episode 4: reward: 13.000, steps: 716\n",
            "Episode 5: reward: 13.000, steps: 757\n",
            "Episode 6: reward: 14.000, steps: 735\n",
            "Episode 7: reward: 10.000, steps: 515\n",
            "Episode 8: reward: 17.000, steps: 826\n",
            "Episode 9: reward: 34.000, steps: 1434\n",
            "Episode 10: reward: 17.000, steps: 766\n",
            "📊 Media final: 15.20\n",
            "📊 Desviación: 6.73\n",
            "🎯 Objetivo: 20.0\n",
            "📈 Faltan: 4.80 puntos\n",
            "\n",
            "Resultados detallados:\n",
            "  Episodio 1: 10.0\n",
            "  Episodio 2: 10.0\n",
            "  Episodio 3: 14.0\n",
            "  Episodio 4: 13.0\n",
            "  Episodio 5: 13.0\n",
            "  Episodio 6: 14.0\n",
            "  Episodio 7: 10.0\n",
            "  Episodio 8: 17.0\n",
            "  Episodio 9: 34.0\n",
            "  Episodio 10: 17.0\n"
          ]
        }
      ],
      "source": [
        "# Evaluación final\n",
        "print(\"\\n📊 EVALUACIÓN FINAL\")\n",
        "print(\"=\"*50)\n",
        "\n",
        "# PARA EVITAR ERROR CUANDO EL MODELO YA ESTA ENTRENADO Y LA VARIABLE NO ES DEFINIDA\n",
        "weights_filename = \"dqn_SpaceInvaders-v0_weights_focused.h5f\"\n",
        "# Cargar los mejores pesos\n",
        "dqn.load_weights(weights_filename)\n",
        "\n",
        "# Evaluar con más episodios para mayor precisión\n",
        "final_results = dqn.test(env, nb_episodes=10, visualize=False)\n",
        "final_mean = np.mean(final_results.history['episode_reward'])\n",
        "final_std = np.std(final_results.history['episode_reward'])\n",
        "\n",
        "print(f\"📊 Media final: {final_mean:.2f}\")\n",
        "print(f\"📊 Desviación: {final_std:.2f}\")\n",
        "print(f\"🎯 Objetivo: 20.0\")\n",
        "\n",
        "if final_mean >= 20:\n",
        "    print(\"🎉 ¡OBJETIVO ALCANZADO!\")\n",
        "else:\n",
        "    print(f\"📈 Faltan: {20.0 - final_mean:.2f} puntos\")\n",
        "\n",
        "# Mostrar todos los resultados\n",
        "print(f\"\\nResultados detallados:\")\n",
        "for i, reward in enumerate(final_results.history['episode_reward'], 1):\n",
        "    print(f\"  Episodio {i}: {reward}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "peMCJ3m-fc8d"
      },
      "source": [
        "#### Visualizar el juego"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ZGWw77pfc8d",
        "outputId": "46bcfc4b-52d7-4626-9df6-540e37041209"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: opencv-python-headless in /usr/local/lib/python3.11/dist-packages (4.11.0.86)\n",
            "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.11/dist-packages (from opencv-python-headless) (1.23.5)\n",
            "Requirement already satisfied: ipywidgets in /usr/local/lib/python3.11/dist-packages (7.7.1)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (6.17.1)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (5.7.1)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.6.10)\n",
            "Requirement already satisfied: ipython>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (7.34.0)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets) (3.0.15)\n",
            "Requirement already satisfied: debugpy>=1.0 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (1.8.0)\n",
            "Requirement already satisfied: jupyter-client>=6.1.12 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.1.12)\n",
            "Requirement already satisfied: matplotlib-inline>=0.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (0.1.7)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (1.6.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (24.2)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (5.9.5)\n",
            "Requirement already satisfied: pyzmq>=17 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (24.0.1)\n",
            "Requirement already satisfied: tornado>=6.1 in /usr/local/lib/python3.11/dist-packages (from ipykernel>=4.5.1->ipywidgets) (6.4.2)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (75.2.0)\n",
            "Collecting jedi>=0.16 (from ipython>=4.0.0->ipywidgets)\n",
            "  Downloading jedi-0.19.2-py2.py3-none-any.whl.metadata (22 kB)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (3.0.51)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (2.19.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (0.2.0)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=4.0.0->ipywidgets) (4.9.0)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.11/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets) (6.5.7)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=4.0.0->ipywidgets) (0.8.4)\n",
            "Requirement already satisfied: jupyter-core>=4.6.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (5.8.1)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.11/dist-packages (from jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (2.9.0.post0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.6)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (25.1.0)\n",
            "Requirement already satisfied: nbformat in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (5.10.4)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (7.16.6)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.3)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.18.1)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.22.1)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.11/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=4.0.0->ipywidgets) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=4.0.0->ipywidgets) (0.2.13)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.11/dist-packages (from jupyter-core>=4.6.0->jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (4.3.8)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.11/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.2.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.13.4)\n",
            "Requirement already satisfied: bleach!=5.0.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (6.2.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.7.1)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.3.0)\n",
            "Requirement already satisfied: markupsafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.0.2)\n",
            "Requirement already satisfied: mistune<4,>=2.0.3 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.1.3)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.10.2)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.11/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.5.1)\n",
            "Requirement already satisfied: fastjsonschema>=2.15 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.21.1)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.11/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.24.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.1->jupyter-client>=6.1.12->ipykernel>=4.5.1->ipywidgets) (1.17.0)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.11/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (21.2.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach!=5.0.0->bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.5.1)\n",
            "Requirement already satisfied: tinycss2<1.5,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from bleach[css]!=5.0.0->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.4.0)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (0.25.1)\n",
            "Requirement already satisfied: jupyter-server<3,>=1.8 in /usr/local/lib/python3.11/dist-packages (from notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.16.0)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.17.1)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.7)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.14.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (2.22)\n",
            "Requirement already satisfied: anyio>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (4.9.0)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.11/dist-packages (from jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.8.0)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio>=3.1.0->jupyter-server<3,>=1.8->notebook-shim>=0.2.3->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets) (1.3.1)\n",
            "Downloading jedi-0.19.2-py2.py3-none-any.whl (1.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m16.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: jedi\n",
            "Successfully installed jedi-0.19.2\n"
          ]
        }
      ],
      "source": [
        "# Instalar OpenCV correctamente\n",
        "%pip install opencv-python-headless\n",
        "%pip install ipywidgets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p3FxKDB0fc8d"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import IPython.display as display\n",
        "import ipywidgets as widgets\n",
        "import time\n",
        "from rl.core import Processor\n",
        "\n",
        "processor = AtariProcessor()\n",
        "def render_game_to_cell(obs):\n",
        "    screen_data = obs\n",
        "    frame = cv2.cvtColor(screen_data, cv2.COLOR_RGB2BGR)\n",
        "    _, jpeg = cv2.imencode('.jpeg', frame)\n",
        "    image_widget.value = jpeg.tobytes()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235,
          "referenced_widgets": [
            "94eef8b0f46b4988951eab9eef4f5deb",
            "0f49857c185a47e68aa8cbd918a223ad"
          ]
        },
        "id": "Wo1qp0xdfc8d",
        "outputId": "5470e2c2-e454-48d1-b48b-ed924681bb27"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Image(value=b'', format='jpeg')"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "94eef8b0f46b4988951eab9eef4f5deb"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "image_widget = widgets.Image(format='jpeg')\n",
        "display.display(image_widget)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tP9NrDP1fc8e"
      },
      "outputs": [],
      "source": [
        "env.reset()\n",
        "action = env.action_space.sample()  # your agent here (this takes first actions as random action)\n",
        "obs, rew, done, info = env.step(action)\n",
        "\n",
        "while not done:\n",
        "    obs, rew, done, info = env.step(dqn.forward(processor.process_observation(obs))) # get actions as a forward pass of your model\n",
        "    render_game_to_cell(obs)\n",
        "    time.sleep(0.05)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M1k5C0Wwfc8e"
      },
      "source": [
        "#### Grabar al agente en un video MP4"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wXFgPp6Rfc8e"
      },
      "outputs": [],
      "source": [
        "import gym\n",
        "from gym import wrappers\n",
        "\n",
        "# Para local\n",
        "#drive_root = \"/home/jovyan\"\n",
        "\n",
        "env = gym.make('SpaceInvaders-v0')\n",
        "env = wrappers.Monitor(env, drive_root+\"/\", force=True)\n",
        "\n",
        "env.reset()\n",
        "for _ in range(1000):\n",
        "    action = env.action_space.sample()\n",
        "    observation, reward, done, info = env.step(action)\n",
        "    if done: break\n",
        "env.close()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "zTb6_Zv2fc8e",
        "outputId": "211f9e04-bbae-4a50-a2f4-f59f47e1e31f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "    <video width=\"360\" height=\"auto\" alt=\"test\" controls><source src=\"data:video/mp4;base64,\" type=\"video/mp4\" /></video>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "#Alternatively, play your video first in a cell with this code.\n",
        "#\n",
        "##############\n",
        "import io\n",
        "import base64\n",
        "from IPython.display import HTML\n",
        "\n",
        "video = io.open(drive_root+'/openaigym.video.%s.video000000.mp4' % env.file_infix, 'r+b').read()\n",
        "encoded = base64.b64encode(video)\n",
        "HTML(data='''\n",
        "    <video width=\"360\" height=\"auto\" alt=\"test\" controls><source src=\"data:video/mp4;base64,{0}\" type=\"video/mp4\" /></video>'''\n",
        ".format(encoded.decode('ascii')))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-NAlu8b1Gb2b"
      },
      "source": [
        "3. Justificación de los parámetros seleccionados y de los resultados obtenidos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Mp2wYxFEfc8e",
        "outputId": "65a7dd2c-f8a5-403c-dffb-3e6cc86e6872"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 ANÁLISIS COMPLETO DEL ENTRENAMIENTO\n",
            "============================================================\n",
            "📈 ESTADÍSTICAS GENERALES:\n",
            "  Total episodios: 3\n",
            "  Pasos totales: 1,941\n",
            "  Recompensa media: 7.67\n",
            "  Recompensa máxima: 10\n",
            "  Recompensa mínima: 6\n",
            "  Desviación estándar: 1.70\n",
            "\n",
            "📊 ANÁLISIS POR SEGMENTOS:\n",
            "  Segmento 4 (episodios 0-2):\n",
            "    Media: 7.67\n",
            "    Episodios ≥20: 0/3 (0.0%)\n",
            "\n",
            "🎯 ANÁLISIS RECIENTE (últimos 50 episodios):\n",
            "  Media: 7.67\n",
            "  Episodios ≥20: 0/50 (0.0%)\n",
            "  Máximo: 10\n",
            "  Mínimo: 6\n",
            "⚠️ Necesita mejora, faltan 12.3 puntos\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-28-3133930077.py:190: UserWarning: Tight layout not applied. tight_layout cannot make Axes height small enough to accommodate all Axes decorations.\n",
            "  plt.tight_layout()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1200 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "============================================================\n",
            "CONCLUSIONES Y RECOMENDACIONES\n",
            "============================================================\n",
            "📊 Tasa de éxito general: 0.0% (0/3 episodios ≥ 20)\n",
            "⚠️ RESULTADO: Necesita más entrenamiento\n",
            "💡 RECOMENDACIÓN: Verificar hiperparámetros y entrenar más\n"
          ]
        }
      ],
      "source": [
        "# ANÁLISIS COMPLETO DE LOS DATOS DE ENTRENAMIENTO\n",
        "\n",
        "import json\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Cargar y procesar los datos del log\n",
        "log_filename = f'dqn_{env_name}_log.json'\n",
        "\n",
        "print(\"📊 ANÁLISIS COMPLETO DEL ENTRENAMIENTO\")\n",
        "print(\"=\"*60)\n",
        "\n",
        "try:\n",
        "    with open(drive_root+'/'+log_filename, 'r') as f:\n",
        "        log_data = json.loads(f.read().strip())\n",
        "\n",
        "    # Extraer datos\n",
        "    episode_rewards = log_data['episode_reward']\n",
        "    episodes = log_data['episode']\n",
        "    nb_steps = log_data['nb_steps']\n",
        "\n",
        "    # Convertir a numpy arrays\n",
        "    rewards = np.array(episode_rewards)\n",
        "    episodes_array = np.array(episodes)\n",
        "\n",
        "    print(f\"📈 ESTADÍSTICAS GENERALES:\")\n",
        "    print(f\"  Total episodios: {len(rewards)}\")\n",
        "    print(f\"  Pasos totales: {max(nb_steps):,}\")\n",
        "    print(f\"  Recompensa media: {np.mean(rewards):.2f}\")\n",
        "    print(f\"  Recompensa máxima: {np.max(rewards):.0f}\")\n",
        "    print(f\"  Recompensa mínima: {np.min(rewards):.0f}\")\n",
        "    print(f\"  Desviación estándar: {np.std(rewards):.2f}\")\n",
        "\n",
        "    # Análisis por segmentos del entrenamiento\n",
        "    total_episodes = len(rewards)\n",
        "    segment_size = total_episodes // 4  # Dividir en 4 segmentos\n",
        "\n",
        "    print(f\"\\n📊 ANÁLISIS POR SEGMENTOS:\")\n",
        "    for i in range(4):\n",
        "        start_idx = i * segment_size\n",
        "        end_idx = (i + 1) * segment_size if i < 3 else total_episodes\n",
        "        segment_rewards = rewards[start_idx:end_idx]\n",
        "\n",
        "        if len(segment_rewards) > 0:\n",
        "            mean_segment = np.mean(segment_rewards)\n",
        "            episodes_above_20 = np.sum(segment_rewards >= 20)\n",
        "            print(f\"  Segmento {i+1} (episodios {start_idx}-{end_idx-1}):\")\n",
        "            print(f\"    Media: {mean_segment:.2f}\")\n",
        "            print(f\"    Episodios ≥20: {episodes_above_20}/{len(segment_rewards)} ({100*episodes_above_20/len(segment_rewards):.1f}%)\")\n",
        "\n",
        "    # Análisis de episodios recientes (últimos 50)\n",
        "    recent_rewards = rewards[-50:]\n",
        "    recent_mean = np.mean(recent_rewards)\n",
        "    recent_above_20 = np.sum(recent_rewards >= 20)\n",
        "\n",
        "    print(f\"\\n🎯 ANÁLISIS RECIENTE (últimos 50 episodios):\")\n",
        "    print(f\"  Media: {recent_mean:.2f}\")\n",
        "    print(f\"  Episodios ≥20: {recent_above_20}/50 ({100*recent_above_20/50:.1f}%)\")\n",
        "    print(f\"  Máximo: {np.max(recent_rewards):.0f}\")\n",
        "    print(f\"  Mínimo: {np.min(recent_rewards):.0f}\")\n",
        "\n",
        "    # Evaluar si está cerca del objetivo\n",
        "    if recent_mean >= 20:\n",
        "        print(f\"🎉 ¡OBJETIVO ALCANZADO EN EPISODIOS RECIENTES!\")\n",
        "    elif recent_mean >= 18:\n",
        "        print(f\"🔥 ¡MUY CERCA DEL OBJETIVO! Solo faltan {20 - recent_mean:.1f} puntos\")\n",
        "    elif recent_mean >= 15:\n",
        "        print(f\"📈 Progreso bueno, faltan {20 - recent_mean:.1f} puntos\")\n",
        "    else:\n",
        "        print(f\"⚠️ Necesita mejora, faltan {20 - recent_mean:.1f} puntos\")\n",
        "\n",
        "    # Crear gráficas\n",
        "    plt.figure(figsize=(15, 12))\n",
        "\n",
        "    # Gráfica 1: Progreso completo\n",
        "    plt.subplot(2, 3, 1)\n",
        "    plt.plot(episodes_array, rewards, alpha=0.6, linewidth=0.8, color='blue')\n",
        "\n",
        "    # Media móvil\n",
        "    window_size = 20\n",
        "    if len(rewards) >= window_size:\n",
        "        moving_avg = np.convolve(rewards, np.ones(window_size)/window_size, mode='valid')\n",
        "        plt.plot(episodes_array[window_size-1:], moving_avg, color='red', linewidth=2,\n",
        "                label=f'Media móvil ({window_size})')\n",
        "\n",
        "    plt.axhline(y=20, color='green', linestyle='--', linewidth=2, label='Objetivo (20)')\n",
        "    plt.axhline(y=np.mean(rewards), color='orange', linestyle=':', label=f'Media total ({np.mean(rewards):.1f})')\n",
        "    plt.xlabel('Episodio')\n",
        "    plt.ylabel('Recompensa')\n",
        "    plt.title('Progreso Completo del Entrenamiento')\n",
        "    plt.legend()\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Gráfica 2: Últimos episodios\n",
        "    plt.subplot(2, 3, 2)\n",
        "    recent_episodes = episodes_array[-50:]\n",
        "    plt.plot(recent_episodes, recent_rewards, 'o-', alpha=0.8, color='darkblue', markersize=4)\n",
        "    plt.axhline(y=20, color='green', linestyle='--', linewidth=2, label='Objetivo (20)')\n",
        "    plt.axhline(y=recent_mean, color='red', linestyle='-', linewidth=2,\n",
        "               label=f'Media reciente ({recent_mean:.1f})')\n",
        "    plt.xlabel('Episodio')\n",
        "    plt.ylabel('Recompensa')\n",
        "    plt.title('Últimos 50 Episodios')\n",
        "    plt.legend()\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Gráfica 3: Distribución de recompensas\n",
        "    plt.subplot(2, 3, 3)\n",
        "    plt.hist(rewards, bins=25, alpha=0.7, color='skyblue', edgecolor='black')\n",
        "    plt.axvline(np.mean(rewards), color='red', linestyle='-', linewidth=2,\n",
        "               label=f'Media ({np.mean(rewards):.1f})')\n",
        "    plt.axvline(20, color='green', linestyle='--', linewidth=2, label='Objetivo (20)')\n",
        "    plt.xlabel('Recompensa')\n",
        "    plt.ylabel('Frecuencia')\n",
        "    plt.title('Distribución de Recompensas')\n",
        "    plt.legend()\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Gráfica 4: Medias por segmentos\n",
        "    plt.subplot(2, 3, 4)\n",
        "    segment_means = []\n",
        "    segment_labels = []\n",
        "    for i in range(4):\n",
        "        start_idx = i * segment_size\n",
        "        end_idx = (i + 1) * segment_size if i < 3 else total_episodes\n",
        "        segment_rewards = rewards[start_idx:end_idx]\n",
        "        if len(segment_rewards) > 0:\n",
        "            segment_means.append(np.mean(segment_rewards))\n",
        "            segment_labels.append(f'Seg {i+1}')\n",
        "\n",
        "    colors = ['lightcoral', 'orange', 'lightgreen', 'darkgreen']\n",
        "    bars = plt.bar(segment_labels, segment_means, color=colors[:len(segment_means)], alpha=0.7)\n",
        "    plt.axhline(y=20, color='red', linestyle='--', linewidth=2, label='Objetivo (20)')\n",
        "    plt.ylabel('Recompensa Media')\n",
        "    plt.title('Progreso por Segmentos')\n",
        "    plt.legend()\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Agregar valores en las barras\n",
        "    for bar, value in zip(bars, segment_means):\n",
        "        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5,\n",
        "                f'{value:.1f}', ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "    # Gráfica 5: Tendencia reciente detallada\n",
        "    plt.subplot(2, 3, 5)\n",
        "    if len(rewards) >= 100:\n",
        "        last_100_rewards = rewards[-100:]\n",
        "        last_100_episodes = episodes_array[-100:]\n",
        "\n",
        "        # Media móvil de últimos 100\n",
        "        window = 10\n",
        "        if len(last_100_rewards) >= window:\n",
        "            moving_avg_recent = np.convolve(last_100_rewards, np.ones(window)/window, mode='valid')\n",
        "            plt.plot(last_100_episodes[window-1:], moving_avg_recent, color='blue', linewidth=3,\n",
        "                    label=f'Media móvil ({window})')\n",
        "\n",
        "        plt.scatter(last_100_episodes, last_100_rewards, alpha=0.5, s=20, color='lightblue')\n",
        "        plt.axhline(y=20, color='green', linestyle='--', linewidth=2, label='Objetivo (20)')\n",
        "        plt.xlabel('Episodio')\n",
        "        plt.ylabel('Recompensa')\n",
        "        plt.title('Tendencia Últimos 100 Episodios')\n",
        "        plt.legend()\n",
        "        plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Gráfica 6: Análisis de éxito\n",
        "    plt.subplot(2, 3, 6)\n",
        "    success_rates = []\n",
        "    windows = [10, 20, 30, 50]\n",
        "\n",
        "    for window in windows:\n",
        "        if len(rewards) >= window:\n",
        "            recent_window = rewards[-window:]\n",
        "            success_rate = (np.sum(recent_window >= 20) / len(recent_window)) * 100\n",
        "            success_rates.append(success_rate)\n",
        "        else:\n",
        "            success_rates.append(0)\n",
        "\n",
        "    bars = plt.bar([f'Últimos\\n{w}' for w in windows], success_rates,\n",
        "                   color=['red' if rate < 50 else 'orange' if rate < 70 else 'green' for rate in success_rates],\n",
        "                   alpha=0.7)\n",
        "    plt.ylabel('% Episodios ≥ 20')\n",
        "    plt.title('Tasa de Éxito por Ventana')\n",
        "    plt.grid(True, alpha=0.3)\n",
        "\n",
        "    # Agregar valores en las barras\n",
        "    for bar, value in zip(bars, success_rates):\n",
        "        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1,\n",
        "                f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    # CONCLUSIONES Y RECOMENDACIONES\n",
        "    print(f\"\\n{'='*60}\")\n",
        "    print(f\"CONCLUSIONES Y RECOMENDACIONES\")\n",
        "    print(f\"{'='*60}\")\n",
        "\n",
        "    total_above_20 = np.sum(rewards >= 20)\n",
        "    overall_success_rate = (total_above_20 / len(rewards)) * 100\n",
        "\n",
        "    print(f\"📊 Tasa de éxito general: {overall_success_rate:.1f}% ({total_above_20}/{len(rewards)} episodios ≥ 20)\")\n",
        "\n",
        "    if recent_mean >= 20:\n",
        "        print(f\"✅ RESULTADO: Objetivo alcanzado en episodios recientes\")\n",
        "        print(f\"💡 RECOMENDACIÓN: Evalúa con más episodios para confirmar\")\n",
        "    elif recent_mean >= 18:\n",
        "        print(f\"🔥 RESULTADO: Muy cerca del objetivo\")\n",
        "        print(f\"💡 RECOMENDACIÓN: Entrenar 100K-200K pasos más con epsilon muy bajo\")\n",
        "    elif recent_mean >= 15:\n",
        "        print(f\"📈 RESULTADO: Progreso sólido pero necesita mejora\")\n",
        "        print(f\"💡 RECOMENDACIÓN: Entrenar 300K-500K pasos más\")\n",
        "    else:\n",
        "        print(f\"⚠️ RESULTADO: Necesita más entrenamiento\")\n",
        "        print(f\"💡 RECOMENDACIÓN: Verificar hiperparámetros y entrenar más\")\n",
        "\n",
        "    # Detectar tendencias\n",
        "    if len(rewards) >= 40:\n",
        "        first_20 = np.mean(rewards[:20])\n",
        "        last_20 = np.mean(rewards[-20:])\n",
        "        improvement = last_20 - first_20\n",
        "\n",
        "        print(f\"\\n📈 TENDENCIA:\")\n",
        "        print(f\"  Primeros 20 episodios: {first_20:.2f}\")\n",
        "        print(f\"  Últimos 20 episodios: {last_20:.2f}\")\n",
        "        print(f\"  Mejora: {improvement:+.2f} puntos\")\n",
        "\n",
        "        if improvement > 3:\n",
        "            print(f\"✅ Tendencia muy positiva - el modelo está aprendiendo bien\")\n",
        "        elif improvement > 0:\n",
        "            print(f\"📈 Tendencia positiva - mejora gradual\")\n",
        "        else:\n",
        "            print(f\"⚠️ Sin mejora clara - revisar estrategia de entrenamiento\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"❌ Error procesando datos: {e}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qnj63OMpfc8f",
        "outputId": "507371e5-5136-416c-8176-d43bbf365397"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Debug: Buscando archivos de pesos...\n",
            "Debug: Archivos en directorio actual: 34\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_400000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_300000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_100000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_200000.h5f.index\n",
            "Debug: Archivo candidato encontrado: dqn_SpaceInvaders-v0_weights_final.h5f.index\n",
            "Debug: Archivos .h5f.index de SpaceInvaders encontrados: ['dqn_SpaceInvaders-v0_weights_400000.h5f.index', 'dqn_SpaceInvaders-v0_weights_300000.h5f.index', 'dqn_SpaceInvaders-v0_weights_100000.h5f.index', 'dqn_SpaceInvaders-v0_weights_focused.h5f.index', 'dqn_SpaceInvaders-v0_weights_200000.h5f.index', 'dqn_SpaceInvaders-v0_weights_final.h5f.index']\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_400000.h5f.index -> 400000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_400000.h5f (400000 pasos)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_300000.h5f.index -> 300000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_300000.h5f (300000 pasos)\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_100000.h5f.index -> 100000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_100000.h5f (100000 pasos)\n",
            "Debug: No se pudo extraer pasos de: dqn_SpaceInvaders-v0_weights_focused.h5f.index\n",
            "Debug: Archivo dqn_SpaceInvaders-v0_weights_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_200000.h5f (200000 pasos)\n",
            "Debug: Archivo válido agregado: dqn_SpaceInvaders-v0_weights_final.h5f (999999 pasos)\n",
            "Debug: Archivos en checkpoints: ['weights_step_800000.h5f.index', 'weights_step_200000.h5f.index', 'weights_step_400000.h5f.index', 'weights_step_1600000.h5f.index', 'weights_step_600000.h5f.index', 'weights_step_1750000.h5f.index']\n",
            "Debug: Archivo weights_step_800000.h5f.index -> 800000 pasos\n",
            "Debug: Archivo weights_step_200000.h5f.index -> 200000 pasos\n",
            "Debug: Archivo weights_step_400000.h5f.index -> 400000 pasos\n",
            "Debug: Archivo weights_step_1600000.h5f.index -> 1600000 pasos\n",
            "Debug: Archivo weights_step_600000.h5f.index -> 600000 pasos\n",
            "Debug: Archivo weights_step_1750000.h5f.index -> 1750000 pasos\n",
            "Debug: Total archivos válidos encontrados: 11\n",
            "Debug: Mejor archivo seleccionado: checkpoints/SpaceInvaders-v0/weights_step_1750000.h5f (1750000 pasos)\n",
            "\n",
            "ESTADO ACTUAL DEL MODELO:\n",
            "==================================================\n",
            "📁 Archivo de pesos: weights_step_1750000.h5f\n",
            "🎯 Pasos completados: 1,750,000\n",
            "📈 Progreso: 100.0%\n",
            "⏳ Pasos restantes: 0\n",
            "🎛️  Epsilon estimado: 0.1000\n",
            "\n",
            "💡 PRÓXIMOS PASOS:\n",
            "🎉 ¡Entrenamiento completado! Proceder a evaluación final.\n",
            "\n",
            "============================================================\n",
            "FIN DEL ANÁLISIS - PROYECTO DQN SPACEINVADERS\n",
            "============================================================\n"
          ]
        }
      ],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ANFQiicXK3sO"
      },
      "source": [
        "---"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.6"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "94eef8b0f46b4988951eab9eef4f5deb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ImageModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ImageModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ImageView",
            "format": "jpeg",
            "height": "",
            "layout": "IPY_MODEL_0f49857c185a47e68aa8cbd918a223ad",
            "width": ""
          }
        },
        "0f49857c185a47e68aa8cbd918a223ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
